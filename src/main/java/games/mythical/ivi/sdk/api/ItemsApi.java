/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.ApiClient;
import games.mythical.ivi.sdk.ApiException;
import games.mythical.ivi.sdk.ApiResponse;
import games.mythical.ivi.sdk.Pair;

import games.mythical.ivi.sdk.model.BurnItemRequest;
import games.mythical.ivi.sdk.model.BuyListingRequest;
import games.mythical.ivi.sdk.model.CloseSaleRequest;
import games.mythical.ivi.sdk.model.CreateItemRequest;
import games.mythical.ivi.sdk.model.DgoodMetadataDto;
import games.mythical.ivi.sdk.model.IssueItemRequest;
import games.mythical.ivi.sdk.model.IssuedItemDto;
import games.mythical.ivi.sdk.model.ItemActionDto;
import games.mythical.ivi.sdk.model.ItemTypeDto;
import games.mythical.ivi.sdk.model.ListSaleRequest;
import games.mythical.ivi.sdk.model.ListingDto;
import games.mythical.ivi.sdk.model.SoldItemDto;
import games.mythical.ivi.sdk.model.TransferItemRequest;
import games.mythical.ivi.sdk.model.UpdateMetadataRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ItemsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public ItemsApi() {
    this(new ApiClient());
  }

  public ItemsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Burn issued item
   * Burn an issued item
   * @param environmentId  (required)
   * @param burnItemRequest  (required)
   * @return ItemActionDto
   * @throws ApiException if fails to make API call
   */
  public ItemActionDto burnItem(String environmentId, BurnItemRequest burnItemRequest) throws ApiException {
    ApiResponse<ItemActionDto> localVarResponse = burnItemWithHttpInfo(environmentId, burnItemRequest);
    return localVarResponse.getData();
  }

  /**
   * Burn issued item
   * Burn an issued item
   * @param environmentId  (required)
   * @param burnItemRequest  (required)
   * @return ApiResponse&lt;ItemActionDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ItemActionDto> burnItemWithHttpInfo(String environmentId, BurnItemRequest burnItemRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = burnItemRequestBuilder(environmentId, burnItemRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "burnItem call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ItemActionDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ItemActionDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder burnItemRequestBuilder(String environmentId, BurnItemRequest burnItemRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling burnItem");
    }
    // verify the required parameter 'burnItemRequest' is set
    if (burnItemRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'burnItemRequest' when calling burnItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/burn"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(burnItemRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Purchase an item
   * Buy an item that is for sale
   * @param environmentId  (required)
   * @param buyListingRequest  (required)
   * @return SoldItemDto
   * @throws ApiException if fails to make API call
   */
  public SoldItemDto buyListing(String environmentId, BuyListingRequest buyListingRequest) throws ApiException {
    ApiResponse<SoldItemDto> localVarResponse = buyListingWithHttpInfo(environmentId, buyListingRequest);
    return localVarResponse.getData();
  }

  /**
   * Purchase an item
   * Buy an item that is for sale
   * @param environmentId  (required)
   * @param buyListingRequest  (required)
   * @return ApiResponse&lt;SoldItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SoldItemDto> buyListingWithHttpInfo(String environmentId, BuyListingRequest buyListingRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = buyListingRequestBuilder(environmentId, buyListingRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "buyListing call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<SoldItemDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SoldItemDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder buyListingRequestBuilder(String environmentId, BuyListingRequest buyListingRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling buyListing");
    }
    // verify the required parameter 'buyListingRequest' is set
    if (buyListingRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'buyListingRequest' when calling buyListing");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/buy"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(buyListingRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Close a sale
   * Close a listed item sale
   * @param environmentId  (required)
   * @param closeSaleRequest  (required)
   * @return ItemActionDto
   * @throws ApiException if fails to make API call
   */
  public ItemActionDto closeSale(String environmentId, CloseSaleRequest closeSaleRequest) throws ApiException {
    ApiResponse<ItemActionDto> localVarResponse = closeSaleWithHttpInfo(environmentId, closeSaleRequest);
    return localVarResponse.getData();
  }

  /**
   * Close a sale
   * Close a listed item sale
   * @param environmentId  (required)
   * @param closeSaleRequest  (required)
   * @return ApiResponse&lt;ItemActionDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ItemActionDto> closeSaleWithHttpInfo(String environmentId, CloseSaleRequest closeSaleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = closeSaleRequestBuilder(environmentId, closeSaleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "closeSale call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ItemActionDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ItemActionDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder closeSaleRequestBuilder(String environmentId, CloseSaleRequest closeSaleRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling closeSale");
    }
    // verify the required parameter 'closeSaleRequest' is set
    if (closeSaleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'closeSaleRequest' when calling closeSale");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/listed"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(closeSaleRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Create item type
   * Create a new type of item on the blockchain that can be issued to players.
   * @param environmentId  (required)
   * @param createItemRequest  (required)
   * @return ItemTypeDto
   * @throws ApiException if fails to make API call
   */
  public ItemTypeDto createItem(String environmentId, CreateItemRequest createItemRequest) throws ApiException {
    ApiResponse<ItemTypeDto> localVarResponse = createItemWithHttpInfo(environmentId, createItemRequest);
    return localVarResponse.getData();
  }

  /**
   * Create item type
   * Create a new type of item on the blockchain that can be issued to players.
   * @param environmentId  (required)
   * @param createItemRequest  (required)
   * @return ApiResponse&lt;ItemTypeDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ItemTypeDto> createItemWithHttpInfo(String environmentId, CreateItemRequest createItemRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createItemRequestBuilder(environmentId, createItemRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "createItem call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ItemTypeDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ItemTypeDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createItemRequestBuilder(String environmentId, CreateItemRequest createItemRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling createItem");
    }
    // verify the required parameter 'createItemRequest' is set
    if (createItemRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createItemRequest' when calling createItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/types"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createItemRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all issued items for an environment.
   * 
   * @param environmentId  (required)
   * @param playerId  (optional)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return List&lt;IssuedItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<IssuedItemDto> getIssuedItems(String environmentId, String playerId, String gameInventoryId, Long dgoodId) throws ApiException {
    ApiResponse<List<IssuedItemDto>> localVarResponse = getIssuedItemsWithHttpInfo(environmentId, playerId, gameInventoryId, dgoodId);
    return localVarResponse.getData();
  }

  /**
   * Get all issued items for an environment.
   * 
   * @param environmentId  (required)
   * @param playerId  (optional)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return ApiResponse&lt;List&lt;IssuedItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<IssuedItemDto>> getIssuedItemsWithHttpInfo(String environmentId, String playerId, String gameInventoryId, Long dgoodId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getIssuedItemsRequestBuilder(environmentId, playerId, gameInventoryId, dgoodId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getIssuedItems call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<IssuedItemDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<IssuedItemDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getIssuedItemsRequestBuilder(String environmentId, String playerId, String gameInventoryId, Long dgoodId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getIssuedItems");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/issued"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playerId", playerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("gameInventoryId", gameInventoryId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dgoodId", dgoodId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all item types for an environment
   * 
   * @param environmentId  (required)
   * @param category  (optional)
   * @param token  (optional)
   * @return List&lt;ItemTypeDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ItemTypeDto> getItemTypes(String environmentId, String category, String token) throws ApiException {
    ApiResponse<List<ItemTypeDto>> localVarResponse = getItemTypesWithHttpInfo(environmentId, category, token);
    return localVarResponse.getData();
  }

  /**
   * Get all item types for an environment
   * 
   * @param environmentId  (required)
   * @param category  (optional)
   * @param token  (optional)
   * @return ApiResponse&lt;List&lt;ItemTypeDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ItemTypeDto>> getItemTypesWithHttpInfo(String environmentId, String category, String token) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemTypesRequestBuilder(environmentId, category, token);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getItemTypes call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<ItemTypeDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ItemTypeDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemTypesRequestBuilder(String environmentId, String category, String token) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getItemTypes");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/types"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category", category));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("token", token));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get listed items
   * Get all listed item for sale
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @param playerId  (optional)
   * @return List&lt;ListingDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ListingDto> getListings(String environmentId, Integer pageSize, Long createdTimestamp, String order, String playerId) throws ApiException {
    ApiResponse<List<ListingDto>> localVarResponse = getListingsWithHttpInfo(environmentId, pageSize, createdTimestamp, order, playerId);
    return localVarResponse.getData();
  }

  /**
   * Get listed items
   * Get all listed item for sale
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @param playerId  (optional)
   * @return ApiResponse&lt;List&lt;ListingDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ListingDto>> getListingsWithHttpInfo(String environmentId, Integer pageSize, Long createdTimestamp, String order, String playerId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getListingsRequestBuilder(environmentId, pageSize, createdTimestamp, order, playerId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getListings call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<ListingDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ListingDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getListingsRequestBuilder(String environmentId, Integer pageSize, Long createdTimestamp, String order, String playerId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getListings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/listed"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createdTimestamp", createdTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playerId", playerId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get metadata for an issued dgood 
   * Get metadata for a dgood id.
   * @param environmentId  (required)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return List&lt;DgoodMetadataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<DgoodMetadataDto> getMetadata(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    ApiResponse<List<DgoodMetadataDto>> localVarResponse = getMetadataWithHttpInfo(environmentId, gameInventoryId, dgoodId);
    return localVarResponse.getData();
  }

  /**
   * Get metadata for an issued dgood 
   * Get metadata for a dgood id.
   * @param environmentId  (required)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return ApiResponse&lt;List&lt;DgoodMetadataDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<DgoodMetadataDto>> getMetadataWithHttpInfo(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMetadataRequestBuilder(environmentId, gameInventoryId, dgoodId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getMetadata call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<DgoodMetadataDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<DgoodMetadataDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMetadataRequestBuilder(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getMetadata");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/issued/metadata"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("gameInventoryId", gameInventoryId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dgoodId", dgoodId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get bought/sold items
   * Get all bought/sold items for a player
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @param buyerPlayerId  (optional)
   * @param sellerPlayerId  (optional)
   * @return List&lt;SoldItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<SoldItemDto> getSoldItems(String environmentId, Integer pageSize, Long createdTimestamp, String order, String buyerPlayerId, String sellerPlayerId) throws ApiException {
    ApiResponse<List<SoldItemDto>> localVarResponse = getSoldItemsWithHttpInfo(environmentId, pageSize, createdTimestamp, order, buyerPlayerId, sellerPlayerId);
    return localVarResponse.getData();
  }

  /**
   * Get bought/sold items
   * Get all bought/sold items for a player
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @param buyerPlayerId  (optional)
   * @param sellerPlayerId  (optional)
   * @return ApiResponse&lt;List&lt;SoldItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<SoldItemDto>> getSoldItemsWithHttpInfo(String environmentId, Integer pageSize, Long createdTimestamp, String order, String buyerPlayerId, String sellerPlayerId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSoldItemsRequestBuilder(environmentId, pageSize, createdTimestamp, order, buyerPlayerId, sellerPlayerId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getSoldItems call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<SoldItemDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<SoldItemDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSoldItemsRequestBuilder(String environmentId, Integer pageSize, Long createdTimestamp, String order, String buyerPlayerId, String sellerPlayerId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getSoldItems");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/buy"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createdTimestamp", createdTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("buyerPlayerId", buyerPlayerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sellerPlayerId", sellerPlayerId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Issue item
   * Issue instance(s) of an item type to a player
   * @param environmentId  (required)
   * @param issueItemRequest  (required)
   * @return IssuedItemDto
   * @throws ApiException if fails to make API call
   */
  public IssuedItemDto issueItem(String environmentId, IssueItemRequest issueItemRequest) throws ApiException {
    ApiResponse<IssuedItemDto> localVarResponse = issueItemWithHttpInfo(environmentId, issueItemRequest);
    return localVarResponse.getData();
  }

  /**
   * Issue item
   * Issue instance(s) of an item type to a player
   * @param environmentId  (required)
   * @param issueItemRequest  (required)
   * @return ApiResponse&lt;IssuedItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<IssuedItemDto> issueItemWithHttpInfo(String environmentId, IssueItemRequest issueItemRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = issueItemRequestBuilder(environmentId, issueItemRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "issueItem call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<IssuedItemDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<IssuedItemDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder issueItemRequestBuilder(String environmentId, IssueItemRequest issueItemRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling issueItem");
    }
    // verify the required parameter 'issueItemRequest' is set
    if (issueItemRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'issueItemRequest' when calling issueItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/issued"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(issueItemRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * List an item for sale
   * List an issued item for sale
   * @param environmentId  (required)
   * @param listSaleRequest  (required)
   * @return ListingDto
   * @throws ApiException if fails to make API call
   */
  public ListingDto listItem(String environmentId, ListSaleRequest listSaleRequest) throws ApiException {
    ApiResponse<ListingDto> localVarResponse = listItemWithHttpInfo(environmentId, listSaleRequest);
    return localVarResponse.getData();
  }

  /**
   * List an item for sale
   * List an issued item for sale
   * @param environmentId  (required)
   * @param listSaleRequest  (required)
   * @return ApiResponse&lt;ListingDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ListingDto> listItemWithHttpInfo(String environmentId, ListSaleRequest listSaleRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = listItemRequestBuilder(environmentId, listSaleRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "listItem call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ListingDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ListingDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder listItemRequestBuilder(String environmentId, ListSaleRequest listSaleRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling listItem");
    }
    // verify the required parameter 'listSaleRequest' is set
    if (listSaleRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'listSaleRequest' when calling listItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/listed"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(listSaleRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Transfer issued item
   * Transfer an issued item
   * @param environmentId  (required)
   * @param transferItemRequest  (required)
   * @return ItemActionDto
   * @throws ApiException if fails to make API call
   */
  public ItemActionDto transferItem(String environmentId, TransferItemRequest transferItemRequest) throws ApiException {
    ApiResponse<ItemActionDto> localVarResponse = transferItemWithHttpInfo(environmentId, transferItemRequest);
    return localVarResponse.getData();
  }

  /**
   * Transfer issued item
   * Transfer an issued item
   * @param environmentId  (required)
   * @param transferItemRequest  (required)
   * @return ApiResponse&lt;ItemActionDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ItemActionDto> transferItemWithHttpInfo(String environmentId, TransferItemRequest transferItemRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = transferItemRequestBuilder(environmentId, transferItemRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "transferItem call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ItemActionDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ItemActionDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder transferItemRequestBuilder(String environmentId, TransferItemRequest transferItemRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling transferItem");
    }
    // verify the required parameter 'transferItemRequest' is set
    if (transferItemRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'transferItemRequest' when calling transferItem");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/transfer"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(transferItemRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Update metadata for a dgood
   * Update metadata for a dgood
   * @param environmentId  (required)
   * @param updateMetadataRequest  (required)
   * @return DgoodMetadataDto
   * @throws ApiException if fails to make API call
   */
  public DgoodMetadataDto updateMetadata(String environmentId, UpdateMetadataRequest updateMetadataRequest) throws ApiException {
    ApiResponse<DgoodMetadataDto> localVarResponse = updateMetadataWithHttpInfo(environmentId, updateMetadataRequest);
    return localVarResponse.getData();
  }

  /**
   * Update metadata for a dgood
   * Update metadata for a dgood
   * @param environmentId  (required)
   * @param updateMetadataRequest  (required)
   * @return ApiResponse&lt;DgoodMetadataDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<DgoodMetadataDto> updateMetadataWithHttpInfo(String environmentId, UpdateMetadataRequest updateMetadataRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateMetadataRequestBuilder(environmentId, updateMetadataRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "updateMetadata call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<DgoodMetadataDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<DgoodMetadataDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateMetadataRequestBuilder(String environmentId, UpdateMetadataRequest updateMetadataRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling updateMetadata");
    }
    // verify the required parameter 'updateMetadataRequest' is set
    if (updateMetadataRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'updateMetadataRequest' when calling updateMetadata");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/items/issued/metadata"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateMetadataRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
