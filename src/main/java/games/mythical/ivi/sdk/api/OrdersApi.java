/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.invoker.ApiCallback;
import games.mythical.ivi.sdk.invoker.ApiClient;
import games.mythical.ivi.sdk.invoker.ApiException;
import games.mythical.ivi.sdk.invoker.ApiResponse;
import games.mythical.ivi.sdk.invoker.Configuration;
import games.mythical.ivi.sdk.invoker.Pair;
import games.mythical.ivi.sdk.invoker.ProgressRequestBody;
import games.mythical.ivi.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import games.mythical.ivi.sdk.model.CreateOrderRequest;
import games.mythical.ivi.sdk.model.OrderDto;
import games.mythical.ivi.sdk.model.UpdateOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrdersApi {
    private ApiClient localVarApiClient;

    public OrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createOrder
     * @param environmentId  (required)
     * @param createOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderCall(String environmentId, CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createOrderRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/orders"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrderValidateBeforeCall(String environmentId, CreateOrderRequest createOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling createOrder(Async)");
        }
        
        // verify the required parameter 'createOrderRequest' is set
        if (createOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createOrderRequest' when calling createOrder(Async)");
        }
        

        okhttp3.Call localVarCall = createOrderCall(environmentId, createOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Order
     * Create New Order
     * @param environmentId  (required)
     * @param createOrderRequest  (required)
     * @return OrderDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OrderDto createOrder(String environmentId, CreateOrderRequest createOrderRequest) throws ApiException {
        ApiResponse<OrderDto> localVarResp = createOrderWithHttpInfo(environmentId, createOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Create Order
     * Create New Order
     * @param environmentId  (required)
     * @param createOrderRequest  (required)
     * @return ApiResponse&lt;OrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDto> createOrderWithHttpInfo(String environmentId, CreateOrderRequest createOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = createOrderValidateBeforeCall(environmentId, createOrderRequest, null);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Order (asynchronously)
     * Create New Order
     * @param environmentId  (required)
     * @param createOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createOrderAsync(String environmentId, CreateOrderRequest createOrderRequest, final ApiCallback<OrderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrderValidateBeforeCall(environmentId, createOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrder
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Order deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/orders/{orderId}"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()))
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrderValidateBeforeCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling deleteOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling deleteOrder(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrderCall(environmentId, orderId, _callback);
        return localVarCall;

    }

    /**
     * Delete Order
     * Delete an existing Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Order deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteOrder(String environmentId, String orderId) throws ApiException {
        deleteOrderWithHttpInfo(environmentId, orderId);
    }

    /**
     * Delete Order
     * Delete an existing Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Order deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteOrderWithHttpInfo(String environmentId, String orderId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(environmentId, orderId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Order (asynchronously)
     * Delete an existing Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Order deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteOrderAsync(String environmentId, String orderId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrderValidateBeforeCall(environmentId, orderId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrder
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/orders"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrderValidateBeforeCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getOrder(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOrder(Async)");
        }
        

        okhttp3.Call localVarCall = getOrderCall(environmentId, orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Order
     * Find an Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @return OrderDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OrderDto getOrder(String environmentId, String orderId) throws ApiException {
        ApiResponse<OrderDto> localVarResp = getOrderWithHttpInfo(environmentId, orderId);
        return localVarResp.getData();
    }

    /**
     * Get Order
     * Find an Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @return ApiResponse&lt;OrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDto> getOrderWithHttpInfo(String environmentId, String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOrderValidateBeforeCall(environmentId, orderId, null);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Order (asynchronously)
     * Find an Order
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrderAsync(String environmentId, String orderId, final ApiCallback<OrderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrderValidateBeforeCall(environmentId, orderId, _callback);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrder
     * @param environmentId  (required)
     * @param updateOrderRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderCall(String environmentId, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateOrderRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/orders"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrderValidateBeforeCall(String environmentId, UpdateOrderRequest updateOrderRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling updateOrder(Async)");
        }
        
        // verify the required parameter 'updateOrderRequest' is set
        if (updateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrderRequest' when calling updateOrder(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrderCall(environmentId, updateOrderRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Order
     * Update fields on an existing Order
     * @param environmentId  (required)
     * @param updateOrderRequest  (required)
     * @return OrderDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OrderDto updateOrder(String environmentId, UpdateOrderRequest updateOrderRequest) throws ApiException {
        ApiResponse<OrderDto> localVarResp = updateOrderWithHttpInfo(environmentId, updateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Update Order
     * Update fields on an existing Order
     * @param environmentId  (required)
     * @param updateOrderRequest  (required)
     * @return ApiResponse&lt;OrderDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrderDto> updateOrderWithHttpInfo(String environmentId, UpdateOrderRequest updateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(environmentId, updateOrderRequest, null);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Order (asynchronously)
     * Update fields on an existing Order
     * @param environmentId  (required)
     * @param updateOrderRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrderAsync(String environmentId, UpdateOrderRequest updateOrderRequest, final ApiCallback<OrderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrderValidateBeforeCall(environmentId, updateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<OrderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
