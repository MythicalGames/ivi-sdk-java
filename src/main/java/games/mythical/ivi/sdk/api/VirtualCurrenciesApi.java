/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.ApiClient;
import games.mythical.ivi.sdk.ApiException;
import games.mythical.ivi.sdk.ApiResponse;
import games.mythical.ivi.sdk.Pair;

import games.mythical.ivi.sdk.model.CreateVirtualCurrencyRequest;
import games.mythical.ivi.sdk.model.VirtualCurrencyDto;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VirtualCurrenciesApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public VirtualCurrenciesApi() {
    this(new ApiClient());
  }

  public VirtualCurrenciesApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Add new virtual currency to environment
   * 
   * @param environmentId  (required)
   * @param createVirtualCurrencyRequest  (required)
   * @return VirtualCurrencyDto
   * @throws ApiException if fails to make API call
   */
  public VirtualCurrencyDto addSupportedCurrencyForEnvironment(String environmentId, CreateVirtualCurrencyRequest createVirtualCurrencyRequest) throws ApiException {
    ApiResponse<VirtualCurrencyDto> localVarResponse = addSupportedCurrencyForEnvironmentWithHttpInfo(environmentId, createVirtualCurrencyRequest);
    return localVarResponse.getData();
  }

  /**
   * Add new virtual currency to environment
   * 
   * @param environmentId  (required)
   * @param createVirtualCurrencyRequest  (required)
   * @return ApiResponse&lt;VirtualCurrencyDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualCurrencyDto> addSupportedCurrencyForEnvironmentWithHttpInfo(String environmentId, CreateVirtualCurrencyRequest createVirtualCurrencyRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addSupportedCurrencyForEnvironmentRequestBuilder(environmentId, createVirtualCurrencyRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "addSupportedCurrencyForEnvironment call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<VirtualCurrencyDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualCurrencyDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addSupportedCurrencyForEnvironmentRequestBuilder(String environmentId, CreateVirtualCurrencyRequest createVirtualCurrencyRequest) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling addSupportedCurrencyForEnvironment");
    }
    // verify the required parameter 'createVirtualCurrencyRequest' is set
    if (createVirtualCurrencyRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createVirtualCurrencyRequest' when calling addSupportedCurrencyForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/currencies"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createVirtualCurrencyRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete virtual currency for environment by abbreviation
   * 
   * @param environmentId  (required)
   * @param abbreviation  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSupportedCurrencyByAbbreviation(String environmentId, String abbreviation) throws ApiException {
    deleteSupportedCurrencyByAbbreviationWithHttpInfo(environmentId, abbreviation);
  }

  /**
   * Delete virtual currency for environment by abbreviation
   * 
   * @param environmentId  (required)
   * @param abbreviation  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteSupportedCurrencyByAbbreviationWithHttpInfo(String environmentId, String abbreviation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteSupportedCurrencyByAbbreviationRequestBuilder(environmentId, abbreviation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "deleteSupportedCurrencyByAbbreviation call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteSupportedCurrencyByAbbreviationRequestBuilder(String environmentId, String abbreviation) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling deleteSupportedCurrencyByAbbreviation");
    }
    // verify the required parameter 'abbreviation' is set
    if (abbreviation == null) {
      throw new ApiException(400, "Missing the required parameter 'abbreviation' when calling deleteSupportedCurrencyByAbbreviation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/currencies/{abbreviation}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{abbreviation}", ApiClient.urlEncode(abbreviation.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get virtual currency for environment by abbreviation
   * 
   * @param environmentId  (required)
   * @param abbreviation  (required)
   * @return VirtualCurrencyDto
   * @throws ApiException if fails to make API call
   */
  public VirtualCurrencyDto getSupportedCurrencyByAbbreviation(String environmentId, String abbreviation) throws ApiException {
    ApiResponse<VirtualCurrencyDto> localVarResponse = getSupportedCurrencyByAbbreviationWithHttpInfo(environmentId, abbreviation);
    return localVarResponse.getData();
  }

  /**
   * Get virtual currency for environment by abbreviation
   * 
   * @param environmentId  (required)
   * @param abbreviation  (required)
   * @return ApiResponse&lt;VirtualCurrencyDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<VirtualCurrencyDto> getSupportedCurrencyByAbbreviationWithHttpInfo(String environmentId, String abbreviation) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSupportedCurrencyByAbbreviationRequestBuilder(environmentId, abbreviation);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getSupportedCurrencyByAbbreviation call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<VirtualCurrencyDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<VirtualCurrencyDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSupportedCurrencyByAbbreviationRequestBuilder(String environmentId, String abbreviation) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getSupportedCurrencyByAbbreviation");
    }
    // verify the required parameter 'abbreviation' is set
    if (abbreviation == null) {
      throw new ApiException(400, "Missing the required parameter 'abbreviation' when calling getSupportedCurrencyByAbbreviation");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/currencies/{abbreviation}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{abbreviation}", ApiClient.urlEncode(abbreviation.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get virtual currencies defined for environment
   * 
   * @param environmentId  (required)
   * @return List&lt;VirtualCurrencyDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<VirtualCurrencyDto> getSupportedCurrencyForEnvironment(String environmentId) throws ApiException {
    ApiResponse<List<VirtualCurrencyDto>> localVarResponse = getSupportedCurrencyForEnvironmentWithHttpInfo(environmentId);
    return localVarResponse.getData();
  }

  /**
   * Get virtual currencies defined for environment
   * 
   * @param environmentId  (required)
   * @return ApiResponse&lt;List&lt;VirtualCurrencyDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<VirtualCurrencyDto>> getSupportedCurrencyForEnvironmentWithHttpInfo(String environmentId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getSupportedCurrencyForEnvironmentRequestBuilder(environmentId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getSupportedCurrencyForEnvironment call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<VirtualCurrencyDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<VirtualCurrencyDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getSupportedCurrencyForEnvironmentRequestBuilder(String environmentId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getSupportedCurrencyForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/environments/{environmentId}/currencies"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
