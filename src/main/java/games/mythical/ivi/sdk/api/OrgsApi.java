/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.invoker.ApiCallback;
import games.mythical.ivi.sdk.invoker.ApiClient;
import games.mythical.ivi.sdk.invoker.ApiException;
import games.mythical.ivi.sdk.invoker.ApiResponse;
import games.mythical.ivi.sdk.invoker.Configuration;
import games.mythical.ivi.sdk.invoker.Pair;
import games.mythical.ivi.sdk.invoker.ProgressRequestBody;
import games.mythical.ivi.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import games.mythical.ivi.sdk.model.CreateTitleRequest;
import games.mythical.ivi.sdk.model.InviteDto;
import games.mythical.ivi.sdk.model.InviteUserToOrganizationRequest;
import games.mythical.ivi.sdk.model.OrganizationDto;
import games.mythical.ivi.sdk.model.PartnerDto;
import games.mythical.ivi.sdk.model.TitleDto;
import games.mythical.ivi.sdk.model.UpdateOrganizationRequest;
import games.mythical.ivi.sdk.model.UpdateOrganizationRoleRequest;
import games.mythical.ivi.sdk.model.UpdatePartnerRequest;
import games.mythical.ivi.sdk.model.UserDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrgsApi {
    private ApiClient localVarApiClient;

    public OrgsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrgsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for acceptInvitation
     * @param organizationId  (required)
     * @param inviteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptInvitationCall(String organizationId, String inviteId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/invites/{inviteId}/accept"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "inviteId" + "\\}", localVarApiClient.escapeString(inviteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptInvitationValidateBeforeCall(String organizationId, String inviteId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling acceptInvitation(Async)");
        }
        
        // verify the required parameter 'inviteId' is set
        if (inviteId == null) {
            throw new ApiException("Missing the required parameter 'inviteId' when calling acceptInvitation(Async)");
        }
        

        okhttp3.Call localVarCall = acceptInvitationCall(organizationId, inviteId, _callback);
        return localVarCall;

    }

    /**
     * Accept an invitation to organization
     * 
     * @param organizationId  (required)
     * @param inviteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public void acceptInvitation(String organizationId, String inviteId) throws ApiException {
        acceptInvitationWithHttpInfo(organizationId, inviteId);
    }

    /**
     * Accept an invitation to organization
     * 
     * @param organizationId  (required)
     * @param inviteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> acceptInvitationWithHttpInfo(String organizationId, String inviteId) throws ApiException {
        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(organizationId, inviteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accept an invitation to organization (asynchronously)
     * 
     * @param organizationId  (required)
     * @param inviteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call acceptInvitationAsync(String organizationId, String inviteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = acceptInvitationValidateBeforeCall(organizationId, inviteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNewTitle
     * @param organizationId  (required)
     * @param createTitleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewTitleCall(String organizationId, CreateTitleRequest createTitleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createTitleRequest;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/titles"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTitleValidateBeforeCall(String organizationId, CreateTitleRequest createTitleRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling createNewTitle(Async)");
        }
        
        // verify the required parameter 'createTitleRequest' is set
        if (createTitleRequest == null) {
            throw new ApiException("Missing the required parameter 'createTitleRequest' when calling createNewTitle(Async)");
        }
        

        okhttp3.Call localVarCall = createNewTitleCall(organizationId, createTitleRequest, _callback);
        return localVarCall;

    }

    /**
     * Create title
     * Create a new title in this organization.
     * @param organizationId  (required)
     * @param createTitleRequest  (required)
     * @return TitleDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public TitleDto createNewTitle(String organizationId, CreateTitleRequest createTitleRequest) throws ApiException {
        ApiResponse<TitleDto> localVarResp = createNewTitleWithHttpInfo(organizationId, createTitleRequest);
        return localVarResp.getData();
    }

    /**
     * Create title
     * Create a new title in this organization.
     * @param organizationId  (required)
     * @param createTitleRequest  (required)
     * @return ApiResponse&lt;TitleDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TitleDto> createNewTitleWithHttpInfo(String organizationId, CreateTitleRequest createTitleRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewTitleValidateBeforeCall(organizationId, createTitleRequest, null);
        Type localVarReturnType = new TypeToken<TitleDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create title (asynchronously)
     * Create a new title in this organization.
     * @param organizationId  (required)
     * @param createTitleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewTitleAsync(String organizationId, CreateTitleRequest createTitleRequest, final ApiCallback<TitleDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTitleValidateBeforeCall(organizationId, createTitleRequest, _callback);
        Type localVarReturnType = new TypeToken<TitleDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrg
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgCall(String organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrgValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrg(Async)");
        }
        

        okhttp3.Call localVarCall = getOrgCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get organization
     * Get organization by id
     * @param organizationId  (required)
     * @return OrganizationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDto getOrg(String organizationId) throws ApiException {
        ApiResponse<OrganizationDto> localVarResp = getOrgWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get organization
     * Get organization by id
     * @param organizationId  (required)
     * @return ApiResponse&lt;OrganizationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDto> getOrgWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrgValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization (asynchronously)
     * Get organization by id
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrgAsync(String organizationId, final ApiCallback<OrganizationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrgValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPendingInvites
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPendingInvitesCall(String organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/invites"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPendingInvitesValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getPendingInvites(Async)");
        }
        

        okhttp3.Call localVarCall = getPendingInvitesCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get organization pending invites
     * 
     * @param organizationId  (required)
     * @return List&lt;InviteDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<InviteDto> getPendingInvites(String organizationId) throws ApiException {
        ApiResponse<List<InviteDto>> localVarResp = getPendingInvitesWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get organization pending invites
     * 
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;InviteDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InviteDto>> getPendingInvitesWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getPendingInvitesValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<InviteDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get organization pending invites (asynchronously)
     * 
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPendingInvitesAsync(String organizationId, final ApiCallback<List<InviteDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPendingInvitesValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<InviteDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTitles
     * @param organizationId  (required)
     * @param includeInactive  (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTitlesCall(String organizationId, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/titles"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInactive", includeInactive));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTitlesValidateBeforeCall(String organizationId, Boolean includeInactive, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getTitles(Async)");
        }
        

        okhttp3.Call localVarCall = getTitlesCall(organizationId, includeInactive, _callback);
        return localVarCall;

    }

    /**
     * Get titles
     * Get titles for organization
     * @param organizationId  (required)
     * @param includeInactive  (optional, default to true)
     * @return List&lt;TitleDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<TitleDto> getTitles(String organizationId, Boolean includeInactive) throws ApiException {
        ApiResponse<List<TitleDto>> localVarResp = getTitlesWithHttpInfo(organizationId, includeInactive);
        return localVarResp.getData();
    }

    /**
     * Get titles
     * Get titles for organization
     * @param organizationId  (required)
     * @param includeInactive  (optional, default to true)
     * @return ApiResponse&lt;List&lt;TitleDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TitleDto>> getTitlesWithHttpInfo(String organizationId, Boolean includeInactive) throws ApiException {
        okhttp3.Call localVarCall = getTitlesValidateBeforeCall(organizationId, includeInactive, null);
        Type localVarReturnType = new TypeToken<List<TitleDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get titles (asynchronously)
     * Get titles for organization
     * @param organizationId  (required)
     * @param includeInactive  (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTitlesAsync(String organizationId, Boolean includeInactive, final ApiCallback<List<TitleDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTitlesValidateBeforeCall(organizationId, includeInactive, _callback);
        Type localVarReturnType = new TypeToken<List<TitleDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersForOrganization
     * @param organizationId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersForOrganizationCall(String organizationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/users"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersForOrganizationValidateBeforeCall(String organizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getUsersForOrganization(Async)");
        }
        

        okhttp3.Call localVarCall = getUsersForOrganizationCall(organizationId, _callback);
        return localVarCall;

    }

    /**
     * Get users
     * Get users for organization
     * @param organizationId  (required)
     * @return List&lt;UserDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<UserDto> getUsersForOrganization(String organizationId) throws ApiException {
        ApiResponse<List<UserDto>> localVarResp = getUsersForOrganizationWithHttpInfo(organizationId);
        return localVarResp.getData();
    }

    /**
     * Get users
     * Get users for organization
     * @param organizationId  (required)
     * @return ApiResponse&lt;List&lt;UserDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UserDto>> getUsersForOrganizationWithHttpInfo(String organizationId) throws ApiException {
        okhttp3.Call localVarCall = getUsersForOrganizationValidateBeforeCall(organizationId, null);
        Type localVarReturnType = new TypeToken<List<UserDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get users (asynchronously)
     * Get users for organization
     * @param organizationId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersForOrganizationAsync(String organizationId, final ApiCallback<List<UserDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersForOrganizationValidateBeforeCall(organizationId, _callback);
        Type localVarReturnType = new TypeToken<List<UserDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteUserToOrg
     * @param organizationId  (required)
     * @param inviteUserToOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserToOrgCall(String organizationId, List<InviteUserToOrganizationRequest> inviteUserToOrganizationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inviteUserToOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/invites"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToOrgValidateBeforeCall(String organizationId, List<InviteUserToOrganizationRequest> inviteUserToOrganizationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling inviteUserToOrg(Async)");
        }
        
        // verify the required parameter 'inviteUserToOrganizationRequest' is set
        if (inviteUserToOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'inviteUserToOrganizationRequest' when calling inviteUserToOrg(Async)");
        }
        

        okhttp3.Call localVarCall = inviteUserToOrgCall(organizationId, inviteUserToOrganizationRequest, _callback);
        return localVarCall;

    }

    /**
     * Invite a user to organization
     * 
     * @param organizationId  (required)
     * @param inviteUserToOrganizationRequest  (required)
     * @return List&lt;InviteDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<InviteDto> inviteUserToOrg(String organizationId, List<InviteUserToOrganizationRequest> inviteUserToOrganizationRequest) throws ApiException {
        ApiResponse<List<InviteDto>> localVarResp = inviteUserToOrgWithHttpInfo(organizationId, inviteUserToOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Invite a user to organization
     * 
     * @param organizationId  (required)
     * @param inviteUserToOrganizationRequest  (required)
     * @return ApiResponse&lt;List&lt;InviteDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InviteDto>> inviteUserToOrgWithHttpInfo(String organizationId, List<InviteUserToOrganizationRequest> inviteUserToOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToOrgValidateBeforeCall(organizationId, inviteUserToOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<List<InviteDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite a user to organization (asynchronously)
     * 
     * @param organizationId  (required)
     * @param inviteUserToOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUserToOrgAsync(String organizationId, List<InviteUserToOrganizationRequest> inviteUserToOrganizationRequest, final ApiCallback<List<InviteDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToOrgValidateBeforeCall(organizationId, inviteUserToOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<List<InviteDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrg
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrgCall(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateOrganizationRequest;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrgValidateBeforeCall(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrg(Async)");
        }
        
        // verify the required parameter 'updateOrganizationRequest' is set
        if (updateOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationRequest' when calling updateOrg(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrgCall(organizationId, updateOrganizationRequest, _callback);
        return localVarCall;

    }

    /**
     * Update organization details
     * 
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (required)
     * @return OrganizationDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OrganizationDto updateOrg(String organizationId, UpdateOrganizationRequest updateOrganizationRequest) throws ApiException {
        ApiResponse<OrganizationDto> localVarResp = updateOrgWithHttpInfo(organizationId, updateOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Update organization details
     * 
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (required)
     * @return ApiResponse&lt;OrganizationDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrganizationDto> updateOrgWithHttpInfo(String organizationId, UpdateOrganizationRequest updateOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrgValidateBeforeCall(organizationId, updateOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<OrganizationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update organization details (asynchronously)
     * 
     * @param organizationId  (required)
     * @param updateOrganizationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrgAsync(String organizationId, UpdateOrganizationRequest updateOrganizationRequest, final ApiCallback<OrganizationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrgValidateBeforeCall(organizationId, updateOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<OrganizationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrgRole
     * @param organizationId  (required)
     * @param platformUserId  (required)
     * @param updateOrganizationRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrgRoleCall(String organizationId, String platformUserId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateOrganizationRoleRequest;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/{platformUserId}/role"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()))
            .replaceAll("\\{" + "platformUserId" + "\\}", localVarApiClient.escapeString(platformUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrgRoleValidateBeforeCall(String organizationId, String platformUserId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrgRole(Async)");
        }
        
        // verify the required parameter 'platformUserId' is set
        if (platformUserId == null) {
            throw new ApiException("Missing the required parameter 'platformUserId' when calling updateOrgRole(Async)");
        }
        
        // verify the required parameter 'updateOrganizationRoleRequest' is set
        if (updateOrganizationRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateOrganizationRoleRequest' when calling updateOrgRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrgRoleCall(organizationId, platformUserId, updateOrganizationRoleRequest, _callback);
        return localVarCall;

    }

    /**
     * Update organization user role
     * 
     * @param organizationId  (required)
     * @param platformUserId  (required)
     * @param updateOrganizationRoleRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public void updateOrgRole(String organizationId, String platformUserId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest) throws ApiException {
        updateOrgRoleWithHttpInfo(organizationId, platformUserId, updateOrganizationRoleRequest);
    }

    /**
     * Update organization user role
     * 
     * @param organizationId  (required)
     * @param platformUserId  (required)
     * @param updateOrganizationRoleRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateOrgRoleWithHttpInfo(String organizationId, String platformUserId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = updateOrgRoleValidateBeforeCall(organizationId, platformUserId, updateOrganizationRoleRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update organization user role (asynchronously)
     * 
     * @param organizationId  (required)
     * @param platformUserId  (required)
     * @param updateOrganizationRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success, no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateOrgRoleAsync(String organizationId, String platformUserId, UpdateOrganizationRoleRequest updateOrganizationRoleRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrgRoleValidateBeforeCall(organizationId, platformUserId, updateOrganizationRoleRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePartner
     * @param organizationId  (required)
     * @param updatePartnerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePartnerCall(String organizationId, UpdatePartnerRequest updatePartnerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatePartnerRequest;

        // create path and map variables
        String localVarPath = "/orgs/{organizationId}/partner"
            .replaceAll("\\{" + "organizationId" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePartnerValidateBeforeCall(String organizationId, UpdatePartnerRequest updatePartnerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updatePartner(Async)");
        }
        
        // verify the required parameter 'updatePartnerRequest' is set
        if (updatePartnerRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePartnerRequest' when calling updatePartner(Async)");
        }
        

        okhttp3.Call localVarCall = updatePartnerCall(organizationId, updatePartnerRequest, _callback);
        return localVarCall;

    }

    /**
     * Update partner details
     * 
     * @param organizationId  (required)
     * @param updatePartnerRequest  (required)
     * @return PartnerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PartnerDto updatePartner(String organizationId, UpdatePartnerRequest updatePartnerRequest) throws ApiException {
        ApiResponse<PartnerDto> localVarResp = updatePartnerWithHttpInfo(organizationId, updatePartnerRequest);
        return localVarResp.getData();
    }

    /**
     * Update partner details
     * 
     * @param organizationId  (required)
     * @param updatePartnerRequest  (required)
     * @return ApiResponse&lt;PartnerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PartnerDto> updatePartnerWithHttpInfo(String organizationId, UpdatePartnerRequest updatePartnerRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePartnerValidateBeforeCall(organizationId, updatePartnerRequest, null);
        Type localVarReturnType = new TypeToken<PartnerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update partner details (asynchronously)
     * 
     * @param organizationId  (required)
     * @param updatePartnerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePartnerAsync(String organizationId, UpdatePartnerRequest updatePartnerRequest, final ApiCallback<PartnerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePartnerValidateBeforeCall(organizationId, updatePartnerRequest, _callback);
        Type localVarReturnType = new TypeToken<PartnerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
