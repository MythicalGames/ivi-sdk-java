/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.ApiClient;
import games.mythical.ivi.sdk.ApiException;
import games.mythical.ivi.sdk.ApiResponse;
import games.mythical.ivi.sdk.Pair;

import games.mythical.ivi.sdk.model.MarketplaceItemDto;
import games.mythical.ivi.sdk.model.MarketplaceListingDto;
import games.mythical.ivi.sdk.model.SearchResponse;
import games.mythical.ivi.sdk.model.TransactionDto;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MarketplaceApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public MarketplaceApi() {
    this(new ApiClient());
  }

  public MarketplaceApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Get all items of an environment
   * 
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @return List&lt;MarketplaceListingDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MarketplaceListingDto> getAllListings(String environmentId, Integer pageSize, Long createdTimestamp, String order) throws ApiException {
    ApiResponse<List<MarketplaceListingDto>> localVarResponse = getAllListingsWithHttpInfo(environmentId, pageSize, createdTimestamp, order);
    return localVarResponse.getData();
  }

  /**
   * Get all items of an environment
   * 
   * @param environmentId  (required)
   * @param pageSize  (optional, default to 30)
   * @param createdTimestamp  (optional, default to -1l)
   * @param order  (optional, default to DESCENDING)
   * @return ApiResponse&lt;List&lt;MarketplaceListingDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<MarketplaceListingDto>> getAllListingsWithHttpInfo(String environmentId, Integer pageSize, Long createdTimestamp, String order) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllListingsRequestBuilder(environmentId, pageSize, createdTimestamp, order);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getAllListings call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<MarketplaceListingDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<MarketplaceListingDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllListingsRequestBuilder(String environmentId, Integer pageSize, Long createdTimestamp, String order) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getAllListings");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/marketplace/environments/{environmentId}/items/listed"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("createdTimestamp", createdTimestamp));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get the history of an item by DGood ID or Game ID
   * 
   * @param environmentId  (required)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return List&lt;TransactionDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<TransactionDto> getItemHistory(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    ApiResponse<List<TransactionDto>> localVarResponse = getItemHistoryWithHttpInfo(environmentId, gameInventoryId, dgoodId);
    return localVarResponse.getData();
  }

  /**
   * Get the history of an item by DGood ID or Game ID
   * 
   * @param environmentId  (required)
   * @param gameInventoryId  (optional)
   * @param dgoodId  (optional, default to -1l)
   * @return ApiResponse&lt;List&lt;TransactionDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<TransactionDto>> getItemHistoryWithHttpInfo(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getItemHistoryRequestBuilder(environmentId, gameInventoryId, dgoodId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getItemHistory call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<TransactionDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<TransactionDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getItemHistoryRequestBuilder(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getItemHistory");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/marketplace/environments/{environmentId}/items/issued/history"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("gameInventoryId", gameInventoryId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("dgoodId", dgoodId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all information for the listing with the given id
   * 
   * @param environmentId  (required)
   * @param listingId  (required)
   * @return MarketplaceListingDto
   * @throws ApiException if fails to make API call
   */
  public MarketplaceListingDto getListing(String environmentId, String listingId) throws ApiException {
    ApiResponse<MarketplaceListingDto> localVarResponse = getListingWithHttpInfo(environmentId, listingId);
    return localVarResponse.getData();
  }

  /**
   * Get all information for the listing with the given id
   * 
   * @param environmentId  (required)
   * @param listingId  (required)
   * @return ApiResponse&lt;MarketplaceListingDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<MarketplaceListingDto> getListingWithHttpInfo(String environmentId, String listingId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getListingRequestBuilder(environmentId, listingId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getListing call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<MarketplaceListingDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<MarketplaceListingDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getListingRequestBuilder(String environmentId, String listingId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getListing");
    }
    // verify the required parameter 'listingId' is set
    if (listingId == null) {
      throw new ApiException(400, "Missing the required parameter 'listingId' when calling getListing");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/marketplace/environments/{environmentId}/items/listed/{listingId}"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()))
        .replace("{listingId}", ApiClient.urlEncode(listingId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get all items owned by the logged in user.
   * 
   * @param environmentId  (required)
   * @param mythicalId  (optional)
   * @param playerId  (optional)
   * @return List&lt;MarketplaceItemDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<MarketplaceItemDto> getMarketplaceItems(String environmentId, UUID mythicalId, String playerId) throws ApiException {
    ApiResponse<List<MarketplaceItemDto>> localVarResponse = getMarketplaceItemsWithHttpInfo(environmentId, mythicalId, playerId);
    return localVarResponse.getData();
  }

  /**
   * Get all items owned by the logged in user.
   * 
   * @param environmentId  (required)
   * @param mythicalId  (optional)
   * @param playerId  (optional)
   * @return ApiResponse&lt;List&lt;MarketplaceItemDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<MarketplaceItemDto>> getMarketplaceItemsWithHttpInfo(String environmentId, UUID mythicalId, String playerId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getMarketplaceItemsRequestBuilder(environmentId, mythicalId, playerId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getMarketplaceItems call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<MarketplaceItemDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<MarketplaceItemDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getMarketplaceItemsRequestBuilder(String environmentId, UUID mythicalId, String playerId) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling getMarketplaceItems");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/marketplace/environments/{environmentId}/items/issued"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mythicalId", mythicalId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("playerId", playerId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Search items
   * 
   * @param environmentId  (required)
   * @param query  (optional)
   * @param filters  (optional)
   * @param artists  (optional)
   * @param rarity  (optional)
   * @param levels  (optional)
   * @param category  (optional)
   * @param tokenName  (optional)
   * @param price  (optional)
   * @param status  (optional)
   * @param pageSize  (optional, default to 30)
   * @param pageNum  (optional, default to 0)
   * @return SearchResponse
   * @throws ApiException if fails to make API call
   */
  public SearchResponse searchItems(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum) throws ApiException {
    ApiResponse<SearchResponse> localVarResponse = searchItemsWithHttpInfo(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum);
    return localVarResponse.getData();
  }

  /**
   * Search items
   * 
   * @param environmentId  (required)
   * @param query  (optional)
   * @param filters  (optional)
   * @param artists  (optional)
   * @param rarity  (optional)
   * @param levels  (optional)
   * @param category  (optional)
   * @param tokenName  (optional)
   * @param price  (optional)
   * @param status  (optional)
   * @param pageSize  (optional, default to 30)
   * @param pageNum  (optional, default to 0)
   * @return ApiResponse&lt;SearchResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<SearchResponse> searchItemsWithHttpInfo(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = searchItemsRequestBuilder(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "searchItems call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<SearchResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<SearchResponse>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder searchItemsRequestBuilder(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum) throws ApiException {
    // verify the required parameter 'environmentId' is set
    if (environmentId == null) {
      throw new ApiException(400, "Missing the required parameter 'environmentId' when calling searchItems");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/marketplace/environments/{environmentId}/items/search"
        .replace("{environmentId}", ApiClient.urlEncode(environmentId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filters", filters));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("artists", artists));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rarity", rarity));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("levels", levels));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category", category));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tokenName", tokenName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("price", price));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("status", status));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageSize", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pageNum", pageNum));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
