/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.invoker.ApiCallback;
import games.mythical.ivi.sdk.invoker.ApiClient;
import games.mythical.ivi.sdk.invoker.ApiException;
import games.mythical.ivi.sdk.invoker.ApiResponse;
import games.mythical.ivi.sdk.invoker.Configuration;
import games.mythical.ivi.sdk.invoker.Pair;
import games.mythical.ivi.sdk.invoker.ProgressRequestBody;
import games.mythical.ivi.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import games.mythical.ivi.sdk.model.MarketplaceItemDto;
import games.mythical.ivi.sdk.model.MarketplaceListingDto;
import games.mythical.ivi.sdk.model.SearchResponse;
import games.mythical.ivi.sdk.model.TransactionDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MarketplaceApi {
    private ApiClient localVarApiClient;

    public MarketplaceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MarketplaceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getAllListings
     * @param environmentId  (required)
     * @param pageSize  (optional, default to 30)
     * @param createdTimestamp  (optional, default to -1l)
     * @param order  (optional, default to DESCENDING)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllListingsCall(String environmentId, Integer pageSize, Long createdTimestamp, String order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/environments/{environmentId}/items/listed"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (createdTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdTimestamp", createdTimestamp));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllListingsValidateBeforeCall(String environmentId, Integer pageSize, Long createdTimestamp, String order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getAllListings(Async)");
        }
        

        okhttp3.Call localVarCall = getAllListingsCall(environmentId, pageSize, createdTimestamp, order, _callback);
        return localVarCall;

    }

    /**
     * Get all items of an environment
     * 
     * @param environmentId  (required)
     * @param pageSize  (optional, default to 30)
     * @param createdTimestamp  (optional, default to -1l)
     * @param order  (optional, default to DESCENDING)
     * @return List&lt;MarketplaceListingDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketplaceListingDto> getAllListings(String environmentId, Integer pageSize, Long createdTimestamp, String order) throws ApiException {
        ApiResponse<List<MarketplaceListingDto>> localVarResp = getAllListingsWithHttpInfo(environmentId, pageSize, createdTimestamp, order);
        return localVarResp.getData();
    }

    /**
     * Get all items of an environment
     * 
     * @param environmentId  (required)
     * @param pageSize  (optional, default to 30)
     * @param createdTimestamp  (optional, default to -1l)
     * @param order  (optional, default to DESCENDING)
     * @return ApiResponse&lt;List&lt;MarketplaceListingDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketplaceListingDto>> getAllListingsWithHttpInfo(String environmentId, Integer pageSize, Long createdTimestamp, String order) throws ApiException {
        okhttp3.Call localVarCall = getAllListingsValidateBeforeCall(environmentId, pageSize, createdTimestamp, order, null);
        Type localVarReturnType = new TypeToken<List<MarketplaceListingDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all items of an environment (asynchronously)
     * 
     * @param environmentId  (required)
     * @param pageSize  (optional, default to 30)
     * @param createdTimestamp  (optional, default to -1l)
     * @param order  (optional, default to DESCENDING)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllListingsAsync(String environmentId, Integer pageSize, Long createdTimestamp, String order, final ApiCallback<List<MarketplaceListingDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllListingsValidateBeforeCall(environmentId, pageSize, createdTimestamp, order, _callback);
        Type localVarReturnType = new TypeToken<List<MarketplaceListingDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemHistory
     * @param environmentId  (required)
     * @param gameInventoryId  (optional)
     * @param dgoodId  (optional, default to -1l)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemHistoryCall(String environmentId, String gameInventoryId, Long dgoodId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/environments/{environmentId}/items/issued/history"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (gameInventoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gameInventoryId", gameInventoryId));
        }

        if (dgoodId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dgoodId", dgoodId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemHistoryValidateBeforeCall(String environmentId, String gameInventoryId, Long dgoodId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getItemHistory(Async)");
        }
        

        okhttp3.Call localVarCall = getItemHistoryCall(environmentId, gameInventoryId, dgoodId, _callback);
        return localVarCall;

    }

    /**
     * Get the history of an item by DGood ID or Game ID
     * 
     * @param environmentId  (required)
     * @param gameInventoryId  (optional)
     * @param dgoodId  (optional, default to -1l)
     * @return List&lt;TransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<TransactionDto> getItemHistory(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
        ApiResponse<List<TransactionDto>> localVarResp = getItemHistoryWithHttpInfo(environmentId, gameInventoryId, dgoodId);
        return localVarResp.getData();
    }

    /**
     * Get the history of an item by DGood ID or Game ID
     * 
     * @param environmentId  (required)
     * @param gameInventoryId  (optional)
     * @param dgoodId  (optional, default to -1l)
     * @return ApiResponse&lt;List&lt;TransactionDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TransactionDto>> getItemHistoryWithHttpInfo(String environmentId, String gameInventoryId, Long dgoodId) throws ApiException {
        okhttp3.Call localVarCall = getItemHistoryValidateBeforeCall(environmentId, gameInventoryId, dgoodId, null);
        Type localVarReturnType = new TypeToken<List<TransactionDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the history of an item by DGood ID or Game ID (asynchronously)
     * 
     * @param environmentId  (required)
     * @param gameInventoryId  (optional)
     * @param dgoodId  (optional, default to -1l)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemHistoryAsync(String environmentId, String gameInventoryId, Long dgoodId, final ApiCallback<List<TransactionDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemHistoryValidateBeforeCall(environmentId, gameInventoryId, dgoodId, _callback);
        Type localVarReturnType = new TypeToken<List<TransactionDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListing
     * @param environmentId  (required)
     * @param listingId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingCall(String environmentId, String listingId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/environments/{environmentId}/items/listed/{listingId}"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()))
            .replaceAll("\\{" + "listingId" + "\\}", localVarApiClient.escapeString(listingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListingValidateBeforeCall(String environmentId, String listingId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getListing(Async)");
        }
        
        // verify the required parameter 'listingId' is set
        if (listingId == null) {
            throw new ApiException("Missing the required parameter 'listingId' when calling getListing(Async)");
        }
        

        okhttp3.Call localVarCall = getListingCall(environmentId, listingId, _callback);
        return localVarCall;

    }

    /**
     * Get all information for the listing with the given id
     * 
     * @param environmentId  (required)
     * @param listingId  (required)
     * @return MarketplaceListingDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public MarketplaceListingDto getListing(String environmentId, String listingId) throws ApiException {
        ApiResponse<MarketplaceListingDto> localVarResp = getListingWithHttpInfo(environmentId, listingId);
        return localVarResp.getData();
    }

    /**
     * Get all information for the listing with the given id
     * 
     * @param environmentId  (required)
     * @param listingId  (required)
     * @return ApiResponse&lt;MarketplaceListingDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MarketplaceListingDto> getListingWithHttpInfo(String environmentId, String listingId) throws ApiException {
        okhttp3.Call localVarCall = getListingValidateBeforeCall(environmentId, listingId, null);
        Type localVarReturnType = new TypeToken<MarketplaceListingDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all information for the listing with the given id (asynchronously)
     * 
     * @param environmentId  (required)
     * @param listingId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListingAsync(String environmentId, String listingId, final ApiCallback<MarketplaceListingDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListingValidateBeforeCall(environmentId, listingId, _callback);
        Type localVarReturnType = new TypeToken<MarketplaceListingDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMarketplaceItems
     * @param environmentId  (required)
     * @param mythicalId  (optional)
     * @param playerId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceItemsCall(String environmentId, UUID mythicalId, String playerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/environments/{environmentId}/items/issued"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mythicalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mythicalId", mythicalId));
        }

        if (playerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("playerId", playerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketplaceItemsValidateBeforeCall(String environmentId, UUID mythicalId, String playerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getMarketplaceItems(Async)");
        }
        

        okhttp3.Call localVarCall = getMarketplaceItemsCall(environmentId, mythicalId, playerId, _callback);
        return localVarCall;

    }

    /**
     * Get all items owned by the logged in user.
     * 
     * @param environmentId  (required)
     * @param mythicalId  (optional)
     * @param playerId  (optional)
     * @return List&lt;MarketplaceItemDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public List<MarketplaceItemDto> getMarketplaceItems(String environmentId, UUID mythicalId, String playerId) throws ApiException {
        ApiResponse<List<MarketplaceItemDto>> localVarResp = getMarketplaceItemsWithHttpInfo(environmentId, mythicalId, playerId);
        return localVarResp.getData();
    }

    /**
     * Get all items owned by the logged in user.
     * 
     * @param environmentId  (required)
     * @param mythicalId  (optional)
     * @param playerId  (optional)
     * @return ApiResponse&lt;List&lt;MarketplaceItemDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MarketplaceItemDto>> getMarketplaceItemsWithHttpInfo(String environmentId, UUID mythicalId, String playerId) throws ApiException {
        okhttp3.Call localVarCall = getMarketplaceItemsValidateBeforeCall(environmentId, mythicalId, playerId, null);
        Type localVarReturnType = new TypeToken<List<MarketplaceItemDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all items owned by the logged in user. (asynchronously)
     * 
     * @param environmentId  (required)
     * @param mythicalId  (optional)
     * @param playerId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMarketplaceItemsAsync(String environmentId, UUID mythicalId, String playerId, final ApiCallback<List<MarketplaceItemDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMarketplaceItemsValidateBeforeCall(environmentId, mythicalId, playerId, _callback);
        Type localVarReturnType = new TypeToken<List<MarketplaceItemDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchItems
     * @param environmentId  (required)
     * @param query  (optional)
     * @param filters  (optional)
     * @param artists  (optional)
     * @param rarity  (optional)
     * @param levels  (optional)
     * @param category  (optional)
     * @param tokenName  (optional)
     * @param price  (optional)
     * @param status  (optional)
     * @param pageSize  (optional, default to 30)
     * @param pageNum  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchItemsCall(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/marketplace/environments/{environmentId}/items/search"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (filters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filters", filters));
        }

        if (artists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("artists", artists));
        }

        if (rarity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rarity", rarity));
        }

        if (levels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("levels", levels));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (tokenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tokenName", tokenName));
        }

        if (price != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("price", price));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchItemsValidateBeforeCall(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling searchItems(Async)");
        }
        

        okhttp3.Call localVarCall = searchItemsCall(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum, _callback);
        return localVarCall;

    }

    /**
     * Search items
     * 
     * @param environmentId  (required)
     * @param query  (optional)
     * @param filters  (optional)
     * @param artists  (optional)
     * @param rarity  (optional)
     * @param levels  (optional)
     * @param category  (optional)
     * @param tokenName  (optional)
     * @param price  (optional)
     * @param status  (optional)
     * @param pageSize  (optional, default to 30)
     * @param pageNum  (optional, default to 0)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse searchItems(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchItemsWithHttpInfo(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum);
        return localVarResp.getData();
    }

    /**
     * Search items
     * 
     * @param environmentId  (required)
     * @param query  (optional)
     * @param filters  (optional)
     * @param artists  (optional)
     * @param rarity  (optional)
     * @param levels  (optional)
     * @param category  (optional)
     * @param tokenName  (optional)
     * @param price  (optional)
     * @param status  (optional)
     * @param pageSize  (optional, default to 30)
     * @param pageNum  (optional, default to 0)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchItemsWithHttpInfo(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum) throws ApiException {
        okhttp3.Call localVarCall = searchItemsValidateBeforeCall(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search items (asynchronously)
     * 
     * @param environmentId  (required)
     * @param query  (optional)
     * @param filters  (optional)
     * @param artists  (optional)
     * @param rarity  (optional)
     * @param levels  (optional)
     * @param category  (optional)
     * @param tokenName  (optional)
     * @param price  (optional)
     * @param status  (optional)
     * @param pageSize  (optional, default to 30)
     * @param pageNum  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchItemsAsync(String environmentId, String query, Boolean filters, String artists, String rarity, String levels, String category, String tokenName, String price, String status, Integer pageSize, Integer pageNum, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchItemsValidateBeforeCall(environmentId, query, filters, artists, rarity, levels, category, tokenName, price, status, pageSize, pageNum, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
