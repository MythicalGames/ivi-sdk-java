/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.invoker.ApiCallback;
import games.mythical.ivi.sdk.invoker.ApiClient;
import games.mythical.ivi.sdk.invoker.ApiException;
import games.mythical.ivi.sdk.invoker.ApiResponse;
import games.mythical.ivi.sdk.invoker.Configuration;
import games.mythical.ivi.sdk.invoker.Pair;
import games.mythical.ivi.sdk.invoker.ProgressRequestBody;
import games.mythical.ivi.sdk.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import games.mythical.ivi.sdk.model.ClientPaymentTokenDto;
import games.mythical.ivi.sdk.model.CreateCustomerRequest;
import games.mythical.ivi.sdk.model.CreatePaymentMethodRequest;
import games.mythical.ivi.sdk.model.CustomerDto;
import games.mythical.ivi.sdk.model.FinalizePaymentRequest;
import games.mythical.ivi.sdk.model.PaymentDto;
import games.mythical.ivi.sdk.model.PaymentMethodDto;
import games.mythical.ivi.sdk.model.SalesTaxInfoDto;
import games.mythical.ivi.sdk.model.SalesTaxTransactionDto;
import games.mythical.ivi.sdk.model.UpdateCustomerRequest;
import games.mythical.ivi.sdk.model.UpdatePaymentMethodDefaultRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient localVarApiClient;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for completePayment
     * @param environmentId  (required)
     * @param finalizePaymentRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have the correct access rights to make this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completePaymentCall(String environmentId, FinalizePaymentRequest finalizePaymentRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = finalizePaymentRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/pay"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completePaymentValidateBeforeCall(String environmentId, FinalizePaymentRequest finalizePaymentRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling completePayment(Async)");
        }
        
        // verify the required parameter 'finalizePaymentRequest' is set
        if (finalizePaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'finalizePaymentRequest' when calling completePayment(Async)");
        }
        

        okhttp3.Call localVarCall = completePaymentCall(environmentId, finalizePaymentRequest, _callback);
        return localVarCall;

    }

    /**
     * Finalize Purchase
     * Make the final payment
     * @param environmentId  (required)
     * @param finalizePaymentRequest  (required)
     * @return PaymentDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have the correct access rights to make this request. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentDto completePayment(String environmentId, FinalizePaymentRequest finalizePaymentRequest) throws ApiException {
        ApiResponse<PaymentDto> localVarResp = completePaymentWithHttpInfo(environmentId, finalizePaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Finalize Purchase
     * Make the final payment
     * @param environmentId  (required)
     * @param finalizePaymentRequest  (required)
     * @return ApiResponse&lt;PaymentDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have the correct access rights to make this request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentDto> completePaymentWithHttpInfo(String environmentId, FinalizePaymentRequest finalizePaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = completePaymentValidateBeforeCall(environmentId, finalizePaymentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finalize Purchase (asynchronously)
     * Make the final payment
     * @param environmentId  (required)
     * @param finalizePaymentRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failure. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You do not have the correct access rights to make this request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call completePaymentAsync(String environmentId, FinalizePaymentRequest finalizePaymentRequest, final ApiCallback<PaymentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = completePaymentValidateBeforeCall(environmentId, finalizePaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCustomer
     * @param environmentId  (required)
     * @param createCustomerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerCall(String environmentId, CreateCustomerRequest createCustomerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createCustomerRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomerValidateBeforeCall(String environmentId, CreateCustomerRequest createCustomerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling createCustomer(Async)");
        }
        
        // verify the required parameter 'createCustomerRequest' is set
        if (createCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'createCustomerRequest' when calling createCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = createCustomerCall(environmentId, createCustomerRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Customer
     * Create Payment Customer
     * @param environmentId  (required)
     * @param createCustomerRequest  (required)
     * @return CustomerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDto createCustomer(String environmentId, CreateCustomerRequest createCustomerRequest) throws ApiException {
        ApiResponse<CustomerDto> localVarResp = createCustomerWithHttpInfo(environmentId, createCustomerRequest);
        return localVarResp.getData();
    }

    /**
     * Create Customer
     * Create Payment Customer
     * @param environmentId  (required)
     * @param createCustomerRequest  (required)
     * @return ApiResponse&lt;CustomerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDto> createCustomerWithHttpInfo(String environmentId, CreateCustomerRequest createCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(environmentId, createCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Customer (asynchronously)
     * Create Payment Customer
     * @param environmentId  (required)
     * @param createCustomerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCustomerAsync(String environmentId, CreateCustomerRequest createCustomerRequest, final ApiCallback<CustomerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomerValidateBeforeCall(environmentId, createCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentMethod
     * @param environmentId  (required)
     * @param createPaymentMethodRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentMethodCall(String environmentId, CreatePaymentMethodRequest createPaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createPaymentMethodRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer/methods"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentMethodValidateBeforeCall(String environmentId, CreatePaymentMethodRequest createPaymentMethodRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling createPaymentMethod(Async)");
        }
        
        // verify the required parameter 'createPaymentMethodRequest' is set
        if (createPaymentMethodRequest == null) {
            throw new ApiException("Missing the required parameter 'createPaymentMethodRequest' when calling createPaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentMethodCall(environmentId, createPaymentMethodRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Payment Method
     * Create Payment Method
     * @param environmentId  (required)
     * @param createPaymentMethodRequest  (required)
     * @return PaymentMethodDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethodDto createPaymentMethod(String environmentId, CreatePaymentMethodRequest createPaymentMethodRequest) throws ApiException {
        ApiResponse<PaymentMethodDto> localVarResp = createPaymentMethodWithHttpInfo(environmentId, createPaymentMethodRequest);
        return localVarResp.getData();
    }

    /**
     * Create Payment Method
     * Create Payment Method
     * @param environmentId  (required)
     * @param createPaymentMethodRequest  (required)
     * @return ApiResponse&lt;PaymentMethodDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethodDto> createPaymentMethodWithHttpInfo(String environmentId, CreatePaymentMethodRequest createPaymentMethodRequest) throws ApiException {
        okhttp3.Call localVarCall = createPaymentMethodValidateBeforeCall(environmentId, createPaymentMethodRequest, null);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Payment Method (asynchronously)
     * Create Payment Method
     * @param environmentId  (required)
     * @param createPaymentMethodRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentMethodAsync(String environmentId, CreatePaymentMethodRequest createPaymentMethodRequest, final ApiCallback<PaymentMethodDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentMethodValidateBeforeCall(environmentId, createPaymentMethodRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCustomer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Customer deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer/{customerId}"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()))
            .replaceAll("\\{" + "customerId" + "\\}", localVarApiClient.escapeString(customerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomerValidateBeforeCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling deleteCustomer(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling deleteCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCustomerCall(environmentId, customerId, _callback);
        return localVarCall;

    }

    /**
     * Delete Customer
     * Delete an existing Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Customer deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCustomer(String environmentId, String customerId) throws ApiException {
        deleteCustomerWithHttpInfo(environmentId, customerId);
    }

    /**
     * Delete Customer
     * Delete an existing Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Customer deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCustomerWithHttpInfo(String environmentId, String customerId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(environmentId, customerId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Customer (asynchronously)
     * Delete an existing Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Customer deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCustomerAsync(String environmentId, String customerId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomerValidateBeforeCall(environmentId, customerId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePaymentMethod
     * @param environmentId  (required)
     * @param methodToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Payment Method deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentMethodCall(String environmentId, String methodToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer/methods/{methodToken}"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()))
            .replaceAll("\\{" + "methodToken" + "\\}", localVarApiClient.escapeString(methodToken.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePaymentMethodValidateBeforeCall(String environmentId, String methodToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling deletePaymentMethod(Async)");
        }
        
        // verify the required parameter 'methodToken' is set
        if (methodToken == null) {
            throw new ApiException("Missing the required parameter 'methodToken' when calling deletePaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = deletePaymentMethodCall(environmentId, methodToken, _callback);
        return localVarCall;

    }

    /**
     * Delete a Payment Method
     * Delete an existing Payment Method
     * @param environmentId  (required)
     * @param methodToken  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Payment Method deleted </td><td>  -  </td></tr>
     </table>
     */
    public void deletePaymentMethod(String environmentId, String methodToken) throws ApiException {
        deletePaymentMethodWithHttpInfo(environmentId, methodToken);
    }

    /**
     * Delete a Payment Method
     * Delete an existing Payment Method
     * @param environmentId  (required)
     * @param methodToken  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Payment Method deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePaymentMethodWithHttpInfo(String environmentId, String methodToken) throws ApiException {
        okhttp3.Call localVarCall = deletePaymentMethodValidateBeforeCall(environmentId, methodToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Payment Method (asynchronously)
     * Delete an existing Payment Method
     * @param environmentId  (required)
     * @param methodToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Payment Method deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePaymentMethodAsync(String environmentId, String methodToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePaymentMethodValidateBeforeCall(environmentId, methodToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateClientToken
     * @param environmentId  (required)
     * @param customerId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateClientTokenCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/token"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateClientTokenValidateBeforeCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling generateClientToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateClientTokenCall(environmentId, customerId, _callback);
        return localVarCall;

    }

    /**
     * Anonymous payment token
     * Get an anonymous payment token for a customer
     * @param environmentId  (required)
     * @param customerId  (optional)
     * @return ClientPaymentTokenDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ClientPaymentTokenDto generateClientToken(String environmentId, String customerId) throws ApiException {
        ApiResponse<ClientPaymentTokenDto> localVarResp = generateClientTokenWithHttpInfo(environmentId, customerId);
        return localVarResp.getData();
    }

    /**
     * Anonymous payment token
     * Get an anonymous payment token for a customer
     * @param environmentId  (required)
     * @param customerId  (optional)
     * @return ApiResponse&lt;ClientPaymentTokenDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientPaymentTokenDto> generateClientTokenWithHttpInfo(String environmentId, String customerId) throws ApiException {
        okhttp3.Call localVarCall = generateClientTokenValidateBeforeCall(environmentId, customerId, null);
        Type localVarReturnType = new TypeToken<ClientPaymentTokenDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Anonymous payment token (asynchronously)
     * Get an anonymous payment token for a customer
     * @param environmentId  (required)
     * @param customerId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateClientTokenAsync(String environmentId, String customerId, final ApiCallback<ClientPaymentTokenDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateClientTokenValidateBeforeCall(environmentId, customerId, _callback);
        Type localVarReturnType = new TypeToken<ClientPaymentTokenDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCustomer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerId", customerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomerValidateBeforeCall(String environmentId, String customerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getCustomer(Async)");
        }
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new ApiException("Missing the required parameter 'customerId' when calling getCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = getCustomerCall(environmentId, customerId, _callback);
        return localVarCall;

    }

    /**
     * Get Customer
     * Find a Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @return CustomerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDto getCustomer(String environmentId, String customerId) throws ApiException {
        ApiResponse<CustomerDto> localVarResp = getCustomerWithHttpInfo(environmentId, customerId);
        return localVarResp.getData();
    }

    /**
     * Get Customer
     * Find a Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @return ApiResponse&lt;CustomerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDto> getCustomerWithHttpInfo(String environmentId, String customerId) throws ApiException {
        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(environmentId, customerId, null);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Customer (asynchronously)
     * Find a Payment Customer
     * @param environmentId  (required)
     * @param customerId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomerAsync(String environmentId, String customerId, final ApiCallback<CustomerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomerValidateBeforeCall(environmentId, customerId, _callback);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentMethod
     * @param environmentId  (required)
     * @param paymentMethodToken  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentMethodCall(String environmentId, String paymentMethodToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer/methods"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (paymentMethodToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("paymentMethodToken", paymentMethodToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentMethodValidateBeforeCall(String environmentId, String paymentMethodToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getPaymentMethod(Async)");
        }
        
        // verify the required parameter 'paymentMethodToken' is set
        if (paymentMethodToken == null) {
            throw new ApiException("Missing the required parameter 'paymentMethodToken' when calling getPaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentMethodCall(environmentId, paymentMethodToken, _callback);
        return localVarCall;

    }

    /**
     * Get Payment Method
     * Find a Payment Method for a customer
     * @param environmentId  (required)
     * @param paymentMethodToken  (required)
     * @return PaymentMethodDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethodDto getPaymentMethod(String environmentId, String paymentMethodToken) throws ApiException {
        ApiResponse<PaymentMethodDto> localVarResp = getPaymentMethodWithHttpInfo(environmentId, paymentMethodToken);
        return localVarResp.getData();
    }

    /**
     * Get Payment Method
     * Find a Payment Method for a customer
     * @param environmentId  (required)
     * @param paymentMethodToken  (required)
     * @return ApiResponse&lt;PaymentMethodDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethodDto> getPaymentMethodWithHttpInfo(String environmentId, String paymentMethodToken) throws ApiException {
        okhttp3.Call localVarCall = getPaymentMethodValidateBeforeCall(environmentId, paymentMethodToken, null);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Payment Method (asynchronously)
     * Find a Payment Method for a customer
     * @param environmentId  (required)
     * @param paymentMethodToken  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentMethodAsync(String environmentId, String paymentMethodToken, final ApiCallback<PaymentMethodDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentMethodValidateBeforeCall(environmentId, paymentMethodToken, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesTaxInfo
     * @param environmentId  (required)
     * @param countryIsoCode  (required)
     * @param stateIsoCode  (required)
     * @param zipCode  (required)
     * @param isSecondaryMarketplace  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesTaxInfoCall(String environmentId, String countryIsoCode, String stateIsoCode, String zipCode, Boolean isSecondaryMarketplace, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/tax/rate"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (countryIsoCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryIsoCode", countryIsoCode));
        }

        if (stateIsoCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stateIsoCode", stateIsoCode));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zipCode", zipCode));
        }

        if (isSecondaryMarketplace != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSecondaryMarketplace", isSecondaryMarketplace));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesTaxInfoValidateBeforeCall(String environmentId, String countryIsoCode, String stateIsoCode, String zipCode, Boolean isSecondaryMarketplace, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getSalesTaxInfo(Async)");
        }
        
        // verify the required parameter 'countryIsoCode' is set
        if (countryIsoCode == null) {
            throw new ApiException("Missing the required parameter 'countryIsoCode' when calling getSalesTaxInfo(Async)");
        }
        
        // verify the required parameter 'stateIsoCode' is set
        if (stateIsoCode == null) {
            throw new ApiException("Missing the required parameter 'stateIsoCode' when calling getSalesTaxInfo(Async)");
        }
        
        // verify the required parameter 'zipCode' is set
        if (zipCode == null) {
            throw new ApiException("Missing the required parameter 'zipCode' when calling getSalesTaxInfo(Async)");
        }
        
        // verify the required parameter 'isSecondaryMarketplace' is set
        if (isSecondaryMarketplace == null) {
            throw new ApiException("Missing the required parameter 'isSecondaryMarketplace' when calling getSalesTaxInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getSalesTaxInfoCall(environmentId, countryIsoCode, stateIsoCode, zipCode, isSecondaryMarketplace, _callback);
        return localVarCall;

    }

    /**
     * Get sales tax- rate and amount based on country, state, zip code and sales amount.
     * Get sales tax rate and tax amount based on country ISO code, state ISO code, zip code and sales amount.
     * @param environmentId  (required)
     * @param countryIsoCode  (required)
     * @param stateIsoCode  (required)
     * @param zipCode  (required)
     * @param isSecondaryMarketplace  (required)
     * @return SalesTaxInfoDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SalesTaxInfoDto getSalesTaxInfo(String environmentId, String countryIsoCode, String stateIsoCode, String zipCode, Boolean isSecondaryMarketplace) throws ApiException {
        ApiResponse<SalesTaxInfoDto> localVarResp = getSalesTaxInfoWithHttpInfo(environmentId, countryIsoCode, stateIsoCode, zipCode, isSecondaryMarketplace);
        return localVarResp.getData();
    }

    /**
     * Get sales tax- rate and amount based on country, state, zip code and sales amount.
     * Get sales tax rate and tax amount based on country ISO code, state ISO code, zip code and sales amount.
     * @param environmentId  (required)
     * @param countryIsoCode  (required)
     * @param stateIsoCode  (required)
     * @param zipCode  (required)
     * @param isSecondaryMarketplace  (required)
     * @return ApiResponse&lt;SalesTaxInfoDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesTaxInfoDto> getSalesTaxInfoWithHttpInfo(String environmentId, String countryIsoCode, String stateIsoCode, String zipCode, Boolean isSecondaryMarketplace) throws ApiException {
        okhttp3.Call localVarCall = getSalesTaxInfoValidateBeforeCall(environmentId, countryIsoCode, stateIsoCode, zipCode, isSecondaryMarketplace, null);
        Type localVarReturnType = new TypeToken<SalesTaxInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get sales tax- rate and amount based on country, state, zip code and sales amount. (asynchronously)
     * Get sales tax rate and tax amount based on country ISO code, state ISO code, zip code and sales amount.
     * @param environmentId  (required)
     * @param countryIsoCode  (required)
     * @param stateIsoCode  (required)
     * @param zipCode  (required)
     * @param isSecondaryMarketplace  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesTaxInfoAsync(String environmentId, String countryIsoCode, String stateIsoCode, String zipCode, Boolean isSecondaryMarketplace, final ApiCallback<SalesTaxInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesTaxInfoValidateBeforeCall(environmentId, countryIsoCode, stateIsoCode, zipCode, isSecondaryMarketplace, _callback);
        Type localVarReturnType = new TypeToken<SalesTaxInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSalesTaxTransaction
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesTaxTransactionCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/tax/transaction/{orderId}"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()))
            .replaceAll("\\{" + "orderId" + "\\}", localVarApiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalesTaxTransactionValidateBeforeCall(String environmentId, String orderId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling getSalesTaxTransaction(Async)");
        }
        
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getSalesTaxTransaction(Async)");
        }
        

        okhttp3.Call localVarCall = getSalesTaxTransactionCall(environmentId, orderId, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction Details
     * Find transaction details for a transaction id
     * @param environmentId  (required)
     * @param orderId  (required)
     * @return SalesTaxTransactionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public SalesTaxTransactionDto getSalesTaxTransaction(String environmentId, String orderId) throws ApiException {
        ApiResponse<SalesTaxTransactionDto> localVarResp = getSalesTaxTransactionWithHttpInfo(environmentId, orderId);
        return localVarResp.getData();
    }

    /**
     * Get Transaction Details
     * Find transaction details for a transaction id
     * @param environmentId  (required)
     * @param orderId  (required)
     * @return ApiResponse&lt;SalesTaxTransactionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SalesTaxTransactionDto> getSalesTaxTransactionWithHttpInfo(String environmentId, String orderId) throws ApiException {
        okhttp3.Call localVarCall = getSalesTaxTransactionValidateBeforeCall(environmentId, orderId, null);
        Type localVarReturnType = new TypeToken<SalesTaxTransactionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction Details (asynchronously)
     * Find transaction details for a transaction id
     * @param environmentId  (required)
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSalesTaxTransactionAsync(String environmentId, String orderId, final ApiCallback<SalesTaxTransactionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalesTaxTransactionValidateBeforeCall(environmentId, orderId, _callback);
        Type localVarReturnType = new TypeToken<SalesTaxTransactionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCustomer
     * @param environmentId  (required)
     * @param updateCustomerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerCall(String environmentId, UpdateCustomerRequest updateCustomerRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateCustomerRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomerValidateBeforeCall(String environmentId, UpdateCustomerRequest updateCustomerRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling updateCustomer(Async)");
        }
        
        // verify the required parameter 'updateCustomerRequest' is set
        if (updateCustomerRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCustomerRequest' when calling updateCustomer(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomerCall(environmentId, updateCustomerRequest, _callback);
        return localVarCall;

    }

    /**
     * Update Customer
     * Update fields on an existing Payment Customer
     * @param environmentId  (required)
     * @param updateCustomerRequest  (required)
     * @return CustomerDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public CustomerDto updateCustomer(String environmentId, UpdateCustomerRequest updateCustomerRequest) throws ApiException {
        ApiResponse<CustomerDto> localVarResp = updateCustomerWithHttpInfo(environmentId, updateCustomerRequest);
        return localVarResp.getData();
    }

    /**
     * Update Customer
     * Update fields on an existing Payment Customer
     * @param environmentId  (required)
     * @param updateCustomerRequest  (required)
     * @return ApiResponse&lt;CustomerDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomerDto> updateCustomerWithHttpInfo(String environmentId, UpdateCustomerRequest updateCustomerRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(environmentId, updateCustomerRequest, null);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Customer (asynchronously)
     * Update fields on an existing Payment Customer
     * @param environmentId  (required)
     * @param updateCustomerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomerAsync(String environmentId, UpdateCustomerRequest updateCustomerRequest, final ApiCallback<CustomerDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomerValidateBeforeCall(environmentId, updateCustomerRequest, _callback);
        Type localVarReturnType = new TypeToken<CustomerDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePaymentMethod
     * @param environmentId  (required)
     * @param updatePaymentMethodDefaultRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentMethodCall(String environmentId, UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updatePaymentMethodDefaultRequest;

        // create path and map variables
        String localVarPath = "/environments/{environmentId}/payments/customer/methods/default"
            .replaceAll("\\{" + "environmentId" + "\\}", localVarApiClient.escapeString(environmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "api_key", "spring_oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaymentMethodValidateBeforeCall(String environmentId, UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'environmentId' is set
        if (environmentId == null) {
            throw new ApiException("Missing the required parameter 'environmentId' when calling updatePaymentMethod(Async)");
        }
        
        // verify the required parameter 'updatePaymentMethodDefaultRequest' is set
        if (updatePaymentMethodDefaultRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePaymentMethodDefaultRequest' when calling updatePaymentMethod(Async)");
        }
        

        okhttp3.Call localVarCall = updatePaymentMethodCall(environmentId, updatePaymentMethodDefaultRequest, _callback);
        return localVarCall;

    }

    /**
     * Update the default Payment Method
     * Set a payment method as a default
     * @param environmentId  (required)
     * @param updatePaymentMethodDefaultRequest  (required)
     * @return PaymentMethodDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PaymentMethodDto updatePaymentMethod(String environmentId, UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest) throws ApiException {
        ApiResponse<PaymentMethodDto> localVarResp = updatePaymentMethodWithHttpInfo(environmentId, updatePaymentMethodDefaultRequest);
        return localVarResp.getData();
    }

    /**
     * Update the default Payment Method
     * Set a payment method as a default
     * @param environmentId  (required)
     * @param updatePaymentMethodDefaultRequest  (required)
     * @return ApiResponse&lt;PaymentMethodDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentMethodDto> updatePaymentMethodWithHttpInfo(String environmentId, UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePaymentMethodValidateBeforeCall(environmentId, updatePaymentMethodDefaultRequest, null);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the default Payment Method (asynchronously)
     * Set a payment method as a default
     * @param environmentId  (required)
     * @param updatePaymentMethodDefaultRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePaymentMethodAsync(String environmentId, UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest, final ApiCallback<PaymentMethodDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaymentMethodValidateBeforeCall(environmentId, updatePaymentMethodDefaultRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentMethodDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
