/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.ApiClient;
import games.mythical.ivi.sdk.ApiException;
import games.mythical.ivi.sdk.Pair;

import games.mythical.ivi.sdk.model.AgreementDto;
import games.mythical.ivi.sdk.model.CreateAgreementRequest;
import games.mythical.ivi.sdk.model.CreatePartnerRequest;
import games.mythical.ivi.sdk.model.PartnerDto;
import games.mythical.ivi.sdk.model.UpdateAgreementRequest;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;


@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-09-15T09:19:26.551556-07:00[America/Los_Angeles]")
public class PartnersApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public PartnersApi() {
    this(new ApiClient());
  }

  public PartnersApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Create Agreement
   * Create a new agreement for a partner
   * @param organizationId  (required)
   * @param partnerId  (required)
   * @param createAgreementRequest  (required)
   * @return AgreementDto
   * @throws ApiException if fails to make API call
   */
  public AgreementDto createNewAgreement (String organizationId, String partnerId, CreateAgreementRequest createAgreementRequest) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
        throw new ApiException(400, "Missing the required parameter 'organizationId' when calling createNewAgreement");
    }
    // verify the required parameter 'partnerId' is set
    if (partnerId == null) {
        throw new ApiException(400, "Missing the required parameter 'partnerId' when calling createNewAgreement");
    }
    // verify the required parameter 'createAgreementRequest' is set
    if (createAgreementRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'createAgreementRequest' when calling createNewAgreement");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/partner/{partnerId}/agreement"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{partnerId}", ApiClient.urlEncode(partnerId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createAgreementRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "createNewAgreement call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AgreementDto>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * Create Partner
   * Create a new partner for an organization
   * @param organizationId  (required)
   * @param createPartnerRequest  (required)
   * @return PartnerDto
   * @throws ApiException if fails to make API call
   */
  public PartnerDto createNewPartner (String organizationId, CreatePartnerRequest createPartnerRequest) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
        throw new ApiException(400, "Missing the required parameter 'organizationId' when calling createNewPartner");
    }
    // verify the required parameter 'createPartnerRequest' is set
    if (createPartnerRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'createPartnerRequest' when calling createNewPartner");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/partner"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createPartnerRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "createNewPartner call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<PartnerDto>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * Get Agreements
   * Get all agreements for an partner
   * @param organizationId  (required)
   * @param partnerId  (required)
   * @return List&lt;AgreementDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<AgreementDto> getAgreements (String organizationId, String partnerId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
        throw new ApiException(400, "Missing the required parameter 'organizationId' when calling getAgreements");
    }
    // verify the required parameter 'partnerId' is set
    if (partnerId == null) {
        throw new ApiException(400, "Missing the required parameter 'partnerId' when calling getAgreements");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/partner/{partnerId}/agreement"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{partnerId}", ApiClient.urlEncode(partnerId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getAgreements call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<AgreementDto>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * Get Partners
   * Get all partners for an organization
   * @param organizationId  (required)
   * @return List&lt;PartnerDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<PartnerDto> getPartners (String organizationId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
        throw new ApiException(400, "Missing the required parameter 'organizationId' when calling getPartners");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/partner"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    try {
      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "getPartners call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<PartnerDto>>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
  /**
   * Update agreement details
   * 
   * @param organizationId  (required)
   * @param partnerId  (required)
   * @param updateAgreementRequest  (required)
   * @return AgreementDto
   * @throws ApiException if fails to make API call
   */
  public AgreementDto updateAgreement (String organizationId, String partnerId, UpdateAgreementRequest updateAgreementRequest) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
        throw new ApiException(400, "Missing the required parameter 'organizationId' when calling updateAgreement");
    }
    // verify the required parameter 'partnerId' is set
    if (partnerId == null) {
        throw new ApiException(400, "Missing the required parameter 'partnerId' when calling updateAgreement");
    }
    // verify the required parameter 'updateAgreementRequest' is set
    if (updateAgreementRequest == null) {
        throw new ApiException(400, "Missing the required parameter 'updateAgreementRequest' when calling updateAgreement");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/partner/{partnerId}/agreement"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{partnerId}", ApiClient.urlEncode(partnerId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(updateAgreementRequest);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
      localVarRequestBuilder.build(),
      HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }          
      if (localVarResponse.statusCode()/ 100 != 2) {
          throw new ApiException(localVarResponse.statusCode(),
              "updateAgreement call received non-success response",
              localVarResponse.headers(),
              localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<AgreementDto>() {});
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }
}
