/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.ApiClient;
import games.mythical.ivi.sdk.ApiException;
import games.mythical.ivi.sdk.ApiResponse;
import games.mythical.ivi.sdk.Pair;

import games.mythical.ivi.sdk.model.CreateServerSecretRequest;
import games.mythical.ivi.sdk.model.ServerSecretDto;
import java.util.UUID;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ServerSecretsApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;

  public ServerSecretsApi() {
    this(new ApiClient());
  }

  public ServerSecretsApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * Create server secret for organization
   * 
   * @param organizationId  (required)
   * @param createServerSecretRequest  (required)
   * @return ServerSecretDto
   * @throws ApiException if fails to make API call
   */
  public ServerSecretDto createServerSecretForEnvironment(UUID organizationId, CreateServerSecretRequest createServerSecretRequest) throws ApiException {
    ApiResponse<ServerSecretDto> localVarResponse = createServerSecretForEnvironmentWithHttpInfo(organizationId, createServerSecretRequest);
    return localVarResponse.getData();
  }

  /**
   * Create server secret for organization
   * 
   * @param organizationId  (required)
   * @param createServerSecretRequest  (required)
   * @return ApiResponse&lt;ServerSecretDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServerSecretDto> createServerSecretForEnvironmentWithHttpInfo(UUID organizationId, CreateServerSecretRequest createServerSecretRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createServerSecretForEnvironmentRequestBuilder(organizationId, createServerSecretRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "createServerSecretForEnvironment call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ServerSecretDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServerSecretDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createServerSecretForEnvironmentRequestBuilder(UUID organizationId, CreateServerSecretRequest createServerSecretRequest) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling createServerSecretForEnvironment");
    }
    // verify the required parameter 'createServerSecretRequest' is set
    if (createServerSecretRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createServerSecretRequest' when calling createServerSecretForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createServerSecretRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Delete server secret for environment by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteServerSecret(UUID organizationId, String secretId) throws ApiException {
    deleteServerSecretWithHttpInfo(organizationId, secretId);
  }

  /**
   * Delete server secret for environment by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteServerSecretWithHttpInfo(UUID organizationId, String secretId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteServerSecretRequestBuilder(organizationId, secretId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "deleteServerSecret call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteServerSecretRequestBuilder(UUID organizationId, String secretId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling deleteServerSecret");
    }
    // verify the required parameter 'secretId' is set
    if (secretId == null) {
      throw new ApiException(400, "Missing the required parameter 'secretId' when calling deleteServerSecret");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets/{secretId}"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{secretId}", ApiClient.urlEncode(secretId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Disable server secret by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @throws ApiException if fails to make API call
   */
  public void disableServerSecret(UUID organizationId, String secretId) throws ApiException {
    disableServerSecretWithHttpInfo(organizationId, secretId);
  }

  /**
   * Disable server secret by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> disableServerSecretWithHttpInfo(UUID organizationId, String secretId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = disableServerSecretRequestBuilder(organizationId, secretId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "disableServerSecret call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder disableServerSecretRequestBuilder(UUID organizationId, String secretId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling disableServerSecret");
    }
    // verify the required parameter 'secretId' is set
    if (secretId == null) {
      throw new ApiException(400, "Missing the required parameter 'secretId' when calling disableServerSecret");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets/{secretId}/disable"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{secretId}", ApiClient.urlEncode(secretId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Enable server secret by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @throws ApiException if fails to make API call
   */
  public void enableServerSecret(UUID organizationId, String secretId) throws ApiException {
    enableServerSecretWithHttpInfo(organizationId, secretId);
  }

  /**
   * Enable server secret by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> enableServerSecretWithHttpInfo(UUID organizationId, String secretId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = enableServerSecretRequestBuilder(organizationId, secretId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "enableServerSecret call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          null
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder enableServerSecretRequestBuilder(UUID organizationId, String secretId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling enableServerSecret");
    }
    // verify the required parameter 'secretId' is set
    if (secretId == null) {
      throw new ApiException(400, "Missing the required parameter 'secretId' when calling enableServerSecret");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets/{secretId}/enable"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{secretId}", ApiClient.urlEncode(secretId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get server secret for environment by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @return ServerSecretDto
   * @throws ApiException if fails to make API call
   */
  public ServerSecretDto getServerSecretById(UUID organizationId, String secretId) throws ApiException {
    ApiResponse<ServerSecretDto> localVarResponse = getServerSecretByIdWithHttpInfo(organizationId, secretId);
    return localVarResponse.getData();
  }

  /**
   * Get server secret for environment by secret ID
   * 
   * @param organizationId  (required)
   * @param secretId  (required)
   * @return ApiResponse&lt;ServerSecretDto&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<ServerSecretDto> getServerSecretByIdWithHttpInfo(UUID organizationId, String secretId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getServerSecretByIdRequestBuilder(organizationId, secretId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getServerSecretById call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<ServerSecretDto>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ServerSecretDto>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getServerSecretByIdRequestBuilder(UUID organizationId, String secretId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling getServerSecretById");
    }
    // verify the required parameter 'secretId' is set
    if (secretId == null) {
      throw new ApiException(400, "Missing the required parameter 'secretId' when calling getServerSecretById");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets/{secretId}"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()))
        .replace("{secretId}", ApiClient.urlEncode(secretId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * Get server secrets defined for organization
   * 
   * @param organizationId  (required)
   * @return List&lt;ServerSecretDto&gt;
   * @throws ApiException if fails to make API call
   */
  public List<ServerSecretDto> getServerSecretsForEnvironment(UUID organizationId) throws ApiException {
    ApiResponse<List<ServerSecretDto>> localVarResponse = getServerSecretsForEnvironmentWithHttpInfo(organizationId);
    return localVarResponse.getData();
  }

  /**
   * Get server secrets defined for organization
   * 
   * @param organizationId  (required)
   * @return ApiResponse&lt;List&lt;ServerSecretDto&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<ServerSecretDto>> getServerSecretsForEnvironmentWithHttpInfo(UUID organizationId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getServerSecretsForEnvironmentRequestBuilder(organizationId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      if (localVarResponse.statusCode()/ 100 != 2) {
        throw new ApiException(localVarResponse.statusCode(),
            "getServerSecretsForEnvironment call received non-success response",
            localVarResponse.headers(),
            localVarResponse.body() == null ? null : new String(localVarResponse.body().readAllBytes()));
      }
      return new ApiResponse<List<ServerSecretDto>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<ServerSecretDto>>() {})
        );
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getServerSecretsForEnvironmentRequestBuilder(UUID organizationId) throws ApiException {
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      throw new ApiException(400, "Missing the required parameter 'organizationId' when calling getServerSecretsForEnvironment");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/orgs/{organizationId}/secrets"
        .replace("{organizationId}", ApiClient.urlEncode(organizationId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
