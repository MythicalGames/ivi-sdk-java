/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.model.CreateMythicalUserRequest;
import games.mythical.ivi.sdk.model.MythicalUserDto;
import games.mythical.ivi.sdk.model.ProfilePictureDto;
import games.mythical.ivi.sdk.model.UpdateMythicalUserRequest;
import games.mythical.ivi.sdk.model.UpdateProfilePictureRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Create new mythical account
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMythicalUserTest() {
        String organizationId = null;
        CreateMythicalUserRequest createMythicalUserRequest = null;
        MythicalUserDto response = api.createMythicalUser(organizationId, createMythicalUserRequest);

        // TODO: test validations
    }
    
    /**
     * Find mythical accounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void findMythicalUserTest() {
        String organizationId = null;
        String email = null;
        String firstName = null;
        String lastName = null;
        List<MythicalUserDto> response = api.findMythicalUser(organizationId, email, firstName, lastName);

        // TODO: test validations
    }
    
    /**
     * Get mythical platform user by id
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMythicalUserTest() {
        String organizationId = null;
        String platformUserId = null;
        MythicalUserDto response = api.getMythicalUser(organizationId, platformUserId);

        // TODO: test validations
    }
    
    /**
     * Reset user password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() {
        String environmentId = null;
        String platformUserId = null;
        api.resetPassword(environmentId, platformUserId);

        // TODO: test validations
    }
    
    /**
     * Update user profile details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfileDetailsTest() {
        String environmentId = null;
        String platformUserId = null;
        UpdateMythicalUserRequest updateMythicalUserRequest = null;
        MythicalUserDto response = api.updateProfileDetails(environmentId, platformUserId, updateMythicalUserRequest);

        // TODO: test validations
    }
    
    /**
     * Update user profile picture
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateProfilePictureTest() {
        String environmentId = null;
        String platformUserId = null;
        UpdateProfilePictureRequest updateProfilePictureRequest = null;
        ProfilePictureDto response = api.updateProfilePicture(environmentId, platformUserId, updateProfilePictureRequest);

        // TODO: test validations
    }
    
}
