/*
 * IVI Engine
 * IVI Engine
 *
 * The version of the OpenAPI document: unspecified
 * Contact: developer@mythical.games
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package games.mythical.ivi.sdk.api;

import games.mythical.ivi.sdk.invoker.ApiException;
import games.mythical.ivi.sdk.model.ClientPaymentTokenDto;
import games.mythical.ivi.sdk.model.CreateCustomerRequest;
import games.mythical.ivi.sdk.model.CreatePaymentMethodRequest;
import games.mythical.ivi.sdk.model.CustomerDto;
import games.mythical.ivi.sdk.model.FinalizePaymentRequest;
import games.mythical.ivi.sdk.model.PaymentDto;
import games.mythical.ivi.sdk.model.PaymentMethodDto;
import games.mythical.ivi.sdk.model.SalesTaxInfoDto;
import games.mythical.ivi.sdk.model.SalesTaxTransactionDto;
import games.mythical.ivi.sdk.model.UpdateCustomerRequest;
import games.mythical.ivi.sdk.model.UpdatePaymentMethodDefaultRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Ignore
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    
    /**
     * Finalize Purchase
     *
     * Make the final payment
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void completePaymentTest() throws ApiException {
        String environmentId = null;
        FinalizePaymentRequest finalizePaymentRequest = null;
        PaymentDto response = api.completePayment(environmentId, finalizePaymentRequest);

        // TODO: test validations
    }
    
    /**
     * Create Customer
     *
     * Create Payment Customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomerTest() throws ApiException {
        String environmentId = null;
        CreateCustomerRequest createCustomerRequest = null;
        CustomerDto response = api.createCustomer(environmentId, createCustomerRequest);

        // TODO: test validations
    }
    
    /**
     * Create Payment Method
     *
     * Create Payment Method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws ApiException {
        String environmentId = null;
        CreatePaymentMethodRequest createPaymentMethodRequest = null;
        PaymentMethodDto response = api.createPaymentMethod(environmentId, createPaymentMethodRequest);

        // TODO: test validations
    }
    
    /**
     * Delete Customer
     *
     * Delete an existing Payment Customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerTest() throws ApiException {
        String environmentId = null;
        String customerId = null;
        api.deleteCustomer(environmentId, customerId);

        // TODO: test validations
    }
    
    /**
     * Delete a Payment Method
     *
     * Delete an existing Payment Method
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePaymentMethodTest() throws ApiException {
        String environmentId = null;
        String methodToken = null;
        api.deletePaymentMethod(environmentId, methodToken);

        // TODO: test validations
    }
    
    /**
     * Anonymous payment token
     *
     * Get an anonymous payment token for a customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateClientTokenTest() throws ApiException {
        String environmentId = null;
        String customerId = null;
        ClientPaymentTokenDto response = api.generateClientToken(environmentId, customerId);

        // TODO: test validations
    }
    
    /**
     * Get Customer
     *
     * Find a Payment Customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerTest() throws ApiException {
        String environmentId = null;
        String customerId = null;
        CustomerDto response = api.getCustomer(environmentId, customerId);

        // TODO: test validations
    }
    
    /**
     * Get Payment Method
     *
     * Find a Payment Method for a customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentMethodTest() throws ApiException {
        String environmentId = null;
        String paymentMethodToken = null;
        PaymentMethodDto response = api.getPaymentMethod(environmentId, paymentMethodToken);

        // TODO: test validations
    }
    
    /**
     * Get sales tax- rate and amount based on country, state, zip code and sales amount.
     *
     * Get sales tax rate and tax amount based on country ISO code, state ISO code, zip code and sales amount.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalesTaxInfoTest() throws ApiException {
        String environmentId = null;
        String countryIsoCode = null;
        String stateIsoCode = null;
        String zipCode = null;
        Boolean isSecondaryMarketplace = null;
        SalesTaxInfoDto response = api.getSalesTaxInfo(environmentId, countryIsoCode, stateIsoCode, zipCode, isSecondaryMarketplace);

        // TODO: test validations
    }
    
    /**
     * Get Transaction Details
     *
     * Find transaction details for a transaction id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSalesTaxTransactionTest() throws ApiException {
        String environmentId = null;
        String orderId = null;
        SalesTaxTransactionDto response = api.getSalesTaxTransaction(environmentId, orderId);

        // TODO: test validations
    }
    
    /**
     * Update Customer
     *
     * Update fields on an existing Payment Customer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerTest() throws ApiException {
        String environmentId = null;
        UpdateCustomerRequest updateCustomerRequest = null;
        CustomerDto response = api.updateCustomer(environmentId, updateCustomerRequest);

        // TODO: test validations
    }
    
    /**
     * Update the default Payment Method
     *
     * Set a payment method as a default
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePaymentMethodTest() throws ApiException {
        String environmentId = null;
        UpdatePaymentMethodDefaultRequest updatePaymentMethodDefaultRequest = null;
        PaymentMethodDto response = api.updatePaymentMethod(environmentId, updatePaymentMethodDefaultRequest);

        // TODO: test validations
    }
    
}
