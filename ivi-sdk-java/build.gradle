apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'jacoco'

version = '2.0.0-SNAPSHOT'

dependencies {
    implementation project(':ivi-sdk-proto')
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jackson_version}"
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: "${commons_lang_version}"
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j_version}"

    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4j_version}"
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri('https://maven.pkg.github.com/MythicalGames/ivi-sdk-java')
            credentials {
                username = project.findProperty('github.user') ?: System.getenv('GITHUB_USER')
                password = project.findProperty('github.token') ?: System.getenv('GITHUB_TOKEN')
            }
        }
        maven {
            name = 'MavenCentral'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('ossrhUsername')
                password = project.findProperty('ossrhPassword')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            pom {
                name = 'IVI SDK'
                description = 'The IVI integration SDK for Java game servers'
                url = 'https://mythical.games'
                from components.java

                scm {
                    connection = 'https://github.com/MythicalGames/ivi-sdk-java.git'
                    developerConnection = 'https://github.com/MythicalGames/ivi-sdk-java.git'
                    url = 'https://github.com/MythicalGames/ivi-sdk-java.git'
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Keith Miller'
                        email = 'keith@mythical.games'
                        organization = 'Mythical Games'
                        organizationUrl = 'https://mythical.games'
                    }
                }
            }
        }
    }
}

tasks.withType(Sign) {
    onlyIf { project.hasProperty('signingKey') && project.hasProperty('signingPassword') }
}

signing {
    // switch to this and comment out the following line to test signing locally
    // useGpgCmd()
    useInMemoryPgpKeys(project.findProperty('signingKey'), findProperty('signingPassword'))
    sign publishing.publications.mavenJava
}

task printVersionToFile {
    doLast {
        file("${rootDir}/version.txt").text = "${project.version}"
    }
}

jacocoTestReport {
    dependsOn test

    executionData fileTree(projectDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}